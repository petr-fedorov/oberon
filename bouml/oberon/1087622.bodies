class Transmuter
!!!1586822.cpp!!!	orderEvent() : bool
auto event = boost::static_pointer_cast<OrderEvent>(std::move(received_));
auto order_id = event->maker();
auto previous_event = previous_.find(order_id);

if (event->isOrderFilled() && event->side() == BookSide::kAsk) 
  buys_[event->price()] += event->change();

if (event->isOrderFilled() && event->side() == BookSide::kBid) 
  sells_[event->price()] += event->change();

if (previous_event != previous_.end() &&
    previous_event->second->take(std::move(event), output_)) {
  if (previous_event->second->empty())
    previous_.erase(previous_event);
  return true;
}
using PriceLevel_SP = PriceLevel::PriceLevel_SP;

if (event->side() == BookSide::kBid) {
  PriceLevel_SP &price_level = bids_[event->price()];
  if(!price_level) price_level = boost::make_shared<PriceLevel>();
  if (price_level->take(std::move(event), output_)) {
    previous_[order_id] = price_level;
    return true;
  }
}
else if (event->side() == BookSide::kAsk) {
  PriceLevel_SP &price_level = asks_[event->price()];
  if(!price_level) price_level = boost::make_shared<PriceLevel>();
  if (price_level->take(std::move(event), output_)) {
    previous_[order_id]= price_level;
    return true;
  }
}
BOOST_LOG_TRIVIAL(warning) << handler_name_ << " ignored " << event->toString();
return true;
!!!1586950.cpp!!!	elapsed() : bool
for (auto & b : bids_)
  b.second->advance(received_->timestamp(), output_);
for (auto & a : asks_)
  a.second->advance(received_->timestamp(), output_);
output_.push_back(std::move(received_));
return true;
!!!1587078.cpp!!!	reset() : bool
for (auto & b : bids_)
  b.second->advance(received_->timestamp(), output_);
for (auto & a : asks_)
  a.second->advance(received_->timestamp(), output_);
bids_.clear();
asks_.clear();
previous_.clear();
return true;
!!!1625862.cpp!!!	era() : bool
if(!passed_era_) {
  output_.push_back(std::move(received_));
  passed_era_ = true;
}
return true;

!!!1587590.cpp!!!	endOfEpisode() : bool
if (!bids_.empty()) {
  auto b = std::prev(bids_.end());
  while (b != bids_.begin() && b->second->empty())
    --b;
  if (!b->second->empty())
    ++b;
  bids_.erase(b, bids_.end());
}
if (!bids_.empty()) {
  if (bids_.rbegin()->second != best_bid_) {
    if (best_bid_)
      best_bid_->bestUntil(episode_timestamp_, output_);
    best_bid_ = bids_.rbegin()->second;
    best_bid_->bestSince(episode_timestamp_, output_);
  }
} else if (best_bid_) {
  best_bid_->bestUntil(episode_timestamp_, output_);
  best_bid_.reset();
}
if (!asks_.empty()) {
  auto a = asks_.begin();
  while (a != asks_.end() && a->second->empty())
    ++a;
  asks_.erase(asks_.begin(), a);
}
if(!asks_.empty()) {
  if (asks_.begin()->second != best_ask_) {
    if (best_ask_)
      best_ask_->bestUntil(episode_timestamp_, output_);
    best_ask_ = asks_.begin()->second;
    best_ask_->bestSince(episode_timestamp_, output_);
  }
}
else if (best_ask_) {
  best_ask_->bestUntil(episode_timestamp_, output_);
  best_ask_.reset();
}
for(auto sell : sells_) {
  output_.push_back(boost::make_unique<Dot>(episode_timestamp_, sell.first, sell.second, BookSide::kBid));
  BOOST_LOG_TRIVIAL(debug) << "Created " << output_.back()->toString();
}
for(auto buy : buys_) {
  output_.push_back(boost::make_unique<Dot>(episode_timestamp_, buy.first, buy.second, BookSide::kAsk));
  BOOST_LOG_TRIVIAL(debug) << "Created " << output_.back()->toString();
}


sells_.clear();
buys_.clear();

BOOST_LOG_TRIVIAL(debug) << "Episode "
                         << date::format("%FT%TZ", episode_timestamp_);
return true;

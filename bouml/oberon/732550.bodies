class Query_snapshot_State
!!!964742.cpp!!!	_upper(inout stm : Coinbase) : Coinbase::AnyState
  return &stm._coinbase_state._engage_state._subscribed_state._snapshot_state;
!!!967814.cpp!!!	create(inout stm : Coinbase) : void
	_doentry(stm);
!!!967942.cpp!!!	_doentry(inout stm : Coinbase) : void
#ifdef VERBOSE_STATE_MACHINE
  std::cout << "DEBUG : execute entry behavior of .Coinbase.Engage.Subscribed.Snapshot.Query snapshot" << std::endl;
#endif
namespace http = boost::beast::http;
std::cout << "HTTP GET " << stm.https_req_.target() << "\n";
http::async_write(
    *stm.https_, stm.https_req_,
    boost::asio::bind_executor(
        *stm.rtc_, [&stm](const boost::system::error_code &ec,
                          std::size_t bytes_transferred) {
          if (ec) {
            stm.ec_ = ec;
            stm.error_message_ = ec.message();
            stm.failure();
          } else {
            http::async_read(
                *stm.https_, stm.https_buffer_, stm.https_res_,
                boost::asio::bind_executor(
                    *stm.rtc_, [&stm](const boost::system::error_code &ec,
                                      std::size_t bytes_transferred) {
                      if (ec) {
                        stm.ec_ = ec;
                        stm.error_message_ = ec.message();
                        stm.failure();
                      } else {
                        // std::cout << stm.https_res_.body() << "\n";
                        std::istringstream is{stm.https_res_.body()};
                        stm.https_res_.body().clear();
                        stm.snapshot_tree_.clear();
                        read_json(is, stm.snapshot_tree_);
                        stm.snapshot_seq_number_ =
                            stm.snapshot_tree_.get<long>("sequence");
                        // stm.snapshot_seq_number_ =
                        // stm.first_seq_number_;
                        std::cout << "Snapshot sequence number: "
                                  << stm.snapshot_seq_number_ << "\n";
                        // stm.https_buffer_.consume(stm.https_buffer_.size());
                        stm.success();
                      }
                    }));
          }
        }));
!!!1028870.cpp!!!	success(inout stm : Coinbase) : void
  {
    for(auto s = stm._current_state; s != this && s; s = s->_upper(stm)) s->_doexit(stm);
    stm._set_currentState(stm._coinbase_state._engage_state._subscribed_state._snapshot_state);
#ifdef VERBOSE_STATE_MACHINE
    std::cout << "DEBUG : current state is now .Coinbase.Engage.Subscribed.Snapshot" << std::endl;
#endif
    if (stm.snapshot_seq_number_ >= stm.first_seq_number_ &&
 stm.snapshot_seq_number_ <= stm.last_seq_number_
) {
      stm._set_currentState(stm._coinbase_state._engage_state._subscribed_state._snapshot_state._save_snapshot_state);
#ifdef VERBOSE_STATE_MACHINE
      std::cout << "DEBUG : current state is now .Coinbase.Engage.Subscribed.Snapshot.Save snapshot" << std::endl;
#endif
      stm._coinbase_state._engage_state._subscribed_state._snapshot_state._save_snapshot_state.create(stm);
    }
    else if (!(stm.snapshot_seq_number_ >= stm.first_seq_number_ &&
 stm.snapshot_seq_number_ == stm.last_seq_number_)
) {
#ifdef VERBOSE_STATE_MACHINE
      std::cout << "DEBUG : execute activity of transition stale" << std::endl;
#endif
std::cout << "Stale snapshot, re-quering ...\n";
      stm._set_currentState(stm._coinbase_state._engage_state._subscribed_state._snapshot_state._query_snapshot_state);
#ifdef VERBOSE_STATE_MACHINE
      std::cout << "DEBUG : current state is now .Coinbase.Engage.Subscribed.Snapshot.Query snapshot" << std::endl;
#endif
      stm._coinbase_state._engage_state._subscribed_state._snapshot_state._query_snapshot_state.create(stm);
    }
  }

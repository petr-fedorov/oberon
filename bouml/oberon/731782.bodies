class Subscribed_State
!!!965126.cpp!!!	heartbeat(inout stm : Coinbase) : void
  {
#ifdef VERBOSE_STATE_MACHINE
    std::cout << "DEBUG : execute activity of transition heartbeat" << std::endl;
#endif
if (stm.timer_->expires_from_now(seconds(2)) > 0) {
  // We managed to cancel the timer. Start new asynchronous wait.
  stm.timer_->async_wait([&stm](const boost::system::error_code &ec) {
    if (ec != boost::asio::error::operation_aborted)
      stm.timeout();
  });
}
std::cout << stm.tree_->get<std::string>("time") << " Timer restarted\n";
stm.ws_->async_read(stm.buffer_, [&stm](const boost::system::error_code &ec,
                                    std::size_t bytes_transferred) {
  boost::ignore_unused(bytes_transferred);
  stm.dispatchJson(ec);
});

  }
!!!965254.cpp!!!	create(inout stm : Coinbase) : void
  _doentry(stm);
  {
    stm._set_currentState(stm._coinbase_state._engage_state._subscribed_state._snapshot_state);
#ifdef VERBOSE_STATE_MACHINE
    std::cout << "DEBUG : current state is now .Coinbase.Engage.Subscribed.Snapshot" << std::endl;
#endif
    stm._coinbase_state._engage_state._subscribed_state._snapshot_state.create(stm);
  }
!!!965382.cpp!!!	_upper(inout stm : Coinbase) : Coinbase::AnyState
  return &stm._coinbase_state._engage_state;
!!!965894.cpp!!!	_doentry(inout stm : Coinbase) : void
#ifdef VERBOSE_STATE_MACHINE
  std::cout << "DEBUG : execute entry behavior of .Coinbase.Engage.Subscribed" << std::endl;
#endif
stm.first_seq_number_ = 0;
stm.last_seq_number_ = 0;
stm.snapshot_seq_number_ = 0;
stm.ws_->async_read(stm.buffer_, [&stm](const boost::system::error_code &ec,
                                std::size_t bytes_transferred) {
  boost::ignore_unused(bytes_transferred);
  stm.dispatchJson(ec);
});

stm.timer_->expires_from_now(seconds(5));
stm.timer_->async_wait([&stm](const boost::system::error_code &ec) {
  if (ec != boost::asio::error::operation_aborted) {
    std::cout << "Time out!\n";
    stm.timeout();
  }
});



!!!976774.cpp!!!	timeout(inout stm : Coinbase) : void
  {
    for(auto s = stm._current_state; s != this && s; s = s->_upper(stm)) s->_doexit(stm);
    stm._set_currentState(stm._coinbase_state._engage_state._subscribed_state._failed_state);
#ifdef VERBOSE_STATE_MACHINE
    std::cout << "DEBUG : current state is now .Coinbase.Engage.Subscribed.Failed" << std::endl;
#endif
  }
!!!984198.cpp!!!	_doexit(inout stm : Coinbase) : void
#ifdef VERBOSE_STATE_MACHINE
  std::cout << "DEBUG : execute exit behavior of .Coinbase.Engage.Subscribed" << std::endl;
#endif
stm.timer_->cancel();
stm.ws_->next_layer().next_layer().shutdown(boost::asio::ip::tcp::socket::shutdown_both);
stm.ws_->next_layer().next_layer().cancel();
stm.ws_->next_layer().next_layer().close();


!!!1029126.cpp!!!	failure(inout stm : Coinbase) : void
  {
    for(auto s = stm._current_state; s != this && s; s = s->_upper(stm)) s->_doexit(stm);
    stm._coinbase_state._engage_state._subscribed_state._doexit(stm);
    stm._set_currentState(stm._coinbase_state._engage_state._initialize_state);
#ifdef VERBOSE_STATE_MACHINE
    std::cout << "DEBUG : current state is now .Coinbase.Engage.Initialize" << std::endl;
#endif
    stm._coinbase_state._engage_state._initialize_state.create(stm);
  }

class Reconstructor
!!!759814.cpp!!!	extract(in tree : ptree [1]) : Token [1..*]
using namespace date;
using namespace std;
using Timestamp=oberon::reconstructor::Message::Timestamp;
string type = tree.get<string>("event");
auto output = boost::make_unique<OrderEvent>();
if (type == "elapsed") {
  return boost::make_unique<Elapsed>(toTimestamp(tree.get<string>("timestamp")));
} else if (type == "order_created") {
  output->maker(toUuid(tree.get<std::string>("data.id_str")));
  output->timestamp(Timestamp{std::chrono::microseconds{
      std::stoll(tree.get<std::string>("data.microtimestamp"))}});
  output->heard(toTimestamp(tree.get<std::string>("local_timestamp")));
  output->price(std::strtod(tree.get<std::string>("data.price_str").c_str(), nullptr));
  output->remaining(std::strtod(tree.get<std::string>("data.amount_str").c_str(), nullptr));
  output->change(0);
  output->ordinal(1);
  output->state(OrderEvent::OrderState::kActive);
  if (tree.get<std::string>("data.order_type") == "0")
    output->side(BookSide::kBid);
  else
    output->side(BookSide::kAsk);

  output->source(tree.get<std::string>("source"));
  assert(output->isOrderCreated());
  return std::move(output);
}
else if (type == "order_changed") {
  output->maker(toUuid(tree.get<std::string>("data.id_str")));
  output->timestamp(Timestamp{std::chrono::microseconds{
      std::stoll(tree.get<std::string>("data.microtimestamp"))}});
  output->heard(toTimestamp(tree.get<std::string>("local_timestamp")));
  output->price(std::strtod(tree.get<std::string>("data.price_str").c_str(), nullptr));
  output->remaining(
      std::strtod(tree.get<std::string>("data.amount_str").c_str(), nullptr));
  if (tree.get<std::string>("data.order_type") == "0")
    output->side(BookSide::kBid);
  else
    output->side(BookSide::kAsk);

  output->state(OrderEvent::OrderState::kActive);
  output->source(tree.get<std::string>("source"));
  assert(output->isOrderChanged());
  return std::move(output);
}
else if (type == "order_deleted") {
    output->maker(toUuid(tree.get<std::string>("data.id_str")));
    output->timestamp(Timestamp{std::chrono::microseconds{
        std::stoll(tree.get<std::string>("data.microtimestamp"))}});
    output->heard(toTimestamp(tree.get<std::string>("local_timestamp")));
    output->price(
        std::strtod(tree.get<std::string>("data.price_str").c_str(), nullptr));
    output->remaining(
        std::strtod(tree.get<std::string>("data.amount_str").c_str(), nullptr));
    if (tree.get<std::string>("data.order_type") == "0")
      output->side(BookSide::kBid);
    else
      output->side(BookSide::kAsk);

    output->state(OrderEvent::OrderState::kFinished);
    output->source(tree.get<std::string>("source"));
    assert(output->isOrderCancelled());
    return std::move(output);
} else if (type == "trade") {
  if (tree.get<std::string>("data.type") == "0") {
    output->maker(toUuid(tree.get<std::string>("data.sell_order_id")));
    output->taker(toUuid(tree.get<std::string>("data.buy_order_id")));
    output->side(BookSide::kAsk);
  } else {
    output->maker(toUuid(tree.get<std::string>("data.buy_order_id")));
    output->taker(toUuid(tree.get<std::string>("data.sell_order_id")));
    output->side(BookSide::kBid);
  }
  output->timestamp(Timestamp{std::chrono::microseconds{
      std::stoll(tree.get<std::string>("data.microtimestamp"))}});
  output->heard(toTimestamp(tree.get<std::string>("local_timestamp")));
  output->price(
      std::strtod(tree.get<std::string>("data.price_str").c_str(), nullptr));
  output->change(
      std::strtod(tree.get<std::string>("data.amount").c_str(), nullptr));
  output->trade(std::stoll(tree.get<std::string>("data.id")));
  output->source(tree.get<std::string>("source"));
  assert(output->isOrderFilled());
  return std::move(output);
} else if (type == "era") {
  return boost::make_unique<Era>(Timestamp{std::chrono::microseconds{std::stoll(tree.get<std::string>("microtimestamp"))}},
        boost::make_shared<Security>(tree.get<string>("exchange"),
          tree.get<string>("product"),
          tree.get<double>("quote_increment"),
          tree.get<double>("base_increment")));

} else if (type == "reset") {
  return boost::make_unique<Reset>(next_->exchange_time());
}
return std::move(output);

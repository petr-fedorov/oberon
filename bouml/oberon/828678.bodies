class Subscribed_State
!!!1159686.cpp!!!	heartbeat(inout stm : Receiver) : void
  {
#ifdef VERBOSE_STATE_MACHINE
   BOOST_LOG_TRIVIAL(debug) <<  stm._machine_name << "execute activity of transition heartbeat";
#endif
if (stm.timer_->expires_from_now(seconds(2)) > 0) {
  // We managed to cancel the timer. Start new asynchronous wait.
  stm.timer_->async_wait(boost::asio::bind_executor(
      *stm.rtc_, [&stm](const boost::system::error_code &ec) {
        if (ec != boost::asio::error::operation_aborted)
          stm.timeout();
      }));
}
#ifdef DEBUG
BOOST_LOG_TRIVIAL(debug) << stm.tree_->get<std::string>("time") << " Timer restarted";
#endif
stm.ws_->async_read(stm.buffer_,
                    boost::asio::bind_executor(
                        *stm.rtc_, [&stm](const boost::system::error_code &ec,
                                          std::size_t bytes_transferred) {
                          boost::ignore_unused(bytes_transferred);
                          stm.dispatchJson(ec);
                        }));
  }
!!!1159814.cpp!!!	create(inout stm : Receiver) : void
  _doentry(stm);
  {
    stm._set_currentState(stm._receiver_state._engage_state._subscribed_state._load_snapshot_state);
#ifdef VERBOSE_STATE_MACHINE
   BOOST_LOG_TRIVIAL(debug) <<  stm._machine_name << "current state is now .Receiver.Engage.Subscribed.Load snapshot";
#endif
    stm._receiver_state._engage_state._subscribed_state._load_snapshot_state.create(stm);
  }
!!!1159942.cpp!!!	failure(inout stm : Receiver) : void
  {
    for(auto s = stm._current_state; s != this && s; s = s->_upper(stm)) s->_doexit(stm);
    stm._receiver_state._engage_state._subscribed_state._doexit(stm);
    stm._set_currentState(stm._receiver_state._engage_state._initialize_state);
#ifdef VERBOSE_STATE_MACHINE
   BOOST_LOG_TRIVIAL(debug) <<  stm._machine_name << "current state is now .Receiver.Engage.Initialize";
#endif
    stm._receiver_state._engage_state._initialize_state.create(stm);
  }
!!!1160710.cpp!!!	timeout(inout stm : Receiver) : void
  {
    for(auto s = stm._current_state; s != this && s; s = s->_upper(stm)) s->_doexit(stm);
    stm._set_currentState(stm._receiver_state._engage_state._subscribed_state._failed_state);
#ifdef VERBOSE_STATE_MACHINE
   BOOST_LOG_TRIVIAL(debug) <<  stm._machine_name << "current state is now .Receiver.Engage.Subscribed.Failed";
#endif
  }
!!!1160838.cpp!!!	_junction1(inout stm : Receiver) : void
  {
    stm._receiver_state._engage_state._subscribed_state._doexit(stm);
    stm._set_currentState(stm._receiver_state._engage_state._initialize_state);
#ifdef VERBOSE_STATE_MACHINE
   BOOST_LOG_TRIVIAL(debug) <<  stm._machine_name << "current state is now .Receiver.Engage.Initialize";
#endif
    stm._receiver_state._engage_state._initialize_state.create(stm);
  }
!!!1160966.cpp!!!	message(inout stm : Receiver) : void
  {
#ifdef VERBOSE_STATE_MACHINE
   BOOST_LOG_TRIVIAL(debug) <<  stm._machine_name << "execute activity of transition message";
#endif
stm.defer();
/*
stm.messages_.push_back(std::move(stm.tree_));
#ifdef DEBUG
BOOST_LOG_TRIVIAL(debug) << "Seq no: " << stm.last_seq_number_
          << " Queue size: " << stm.messages_.size();
#endif
stm.ws_->async_read(stm.buffer_,
                    boost::asio::bind_executor(
                        *stm.rtc_, [&stm](const boost::system::error_code &ec,
                                          std::size_t bytes_transferred) {
                          boost::ignore_unused(bytes_transferred);
                          stm.dispatchJson(ec);
                        }));
                        */


  }
!!!1162118.cpp!!!	_doentry(inout stm : Receiver) : void
#ifdef VERBOSE_STATE_MACHINE
   BOOST_LOG_TRIVIAL(debug) <<  stm._machine_name << "execute entry behavior of .Receiver.Engage.Subscribed";
#endif
stm.first_seq_number_ = 0;
stm.last_seq_number_ = 0;
stm.ws_->async_read(stm.buffer_,
                    boost::asio::bind_executor(
                        *stm.rtc_, [&stm](const boost::system::error_code &ec,
                                          std::size_t bytes_transferred) {
                          boost::ignore_unused(bytes_transferred);
                          stm.dispatchJson(ec);
                        }));

stm.timer_->expires_from_now(seconds(5));
stm.timer_->async_wait(boost::asio::bind_executor(
    *stm.rtc_, [&stm](const boost::system::error_code &ec) {
      if (ec != boost::asio::error::operation_aborted) {
#ifdef DEBUG
        BOOST_LOG_TRIVIAL(warning) << "Time out!\n";
#endif
        stm.timeout();
      }
    }));
!!!1162246.cpp!!!	_doexit(inout stm : Receiver) : void
#ifdef VERBOSE_STATE_MACHINE
   BOOST_LOG_TRIVIAL(debug) <<  stm._machine_name << "execute exit behavior of .Receiver.Engage.Subscribed";
#endif
stm.timer_->cancel();
stm.ws_->next_layer().next_layer().shutdown(boost::asio::ip::tcp::socket::shutdown_both);
stm.ws_->next_layer().next_layer().cancel();
stm.ws_->next_layer().next_layer().close();
stm.messages_.clear();


!!!1162374.cpp!!!	_upper(inout stm : Receiver) : Receiver::AnyState
  return &stm._receiver_state._engage_state;

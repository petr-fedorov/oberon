class Subscribe_State
!!!961798.cpp!!!	create(inout stm : Coinbase) : void
	_doentry(stm);
!!!961926.cpp!!!	_doentry(inout stm : Coinbase) : void
#ifdef VERBOSE_STATE_MACHINE
   BOOST_LOG_TRIVIAL(debug) <<  stm._machine_name << "execute entry behavior of .Coinbase.Engage.Initialize.Subscribe";
#endif
using namespace boost::property_tree;
ptree tree;
std::ostringstream request;
tree.put("type", "subscribe");

tree.add_child("product_ids", stm.products_);
tree.add_child("channels", stm.channels_);

write_json(request, tree, false);
#ifdef DEBUG
BOOST_LOG_TRIVIAL(debug) << "Request: " << request.str(); 
#endif
stm.ws_->async_write(boost::asio::buffer(request.str()),
                     boost::asio::bind_executor(
                         *stm.rtc_, [&stm](const boost::system::error_code &ec,
                                           std::size_t bytes_transferred) {
                           if (ec)
                             stm.failure();
                           else {
                             // Read a message into our buffer
                             stm.ws_->async_read(
                                 stm.buffer_,
                                 [&stm](const boost::system::error_code &ec,
                                        std::size_t bytes_transferred) {
                                   stm.dispatchJson(ec);
                                 });
                           }
                         }));
!!!962054.cpp!!!	_upper(inout stm : Coinbase) : Coinbase::AnyState
  return &stm._coinbase_state._engage_state._initialize_state;
!!!1027590.cpp!!!	success(inout stm : Coinbase) : void
  {
    for(auto s = stm._current_state; s != this && s; s = s->_upper(stm)) s->_doexit(stm);
    stm._set_currentState(stm._coinbase_state._engage_state._initialize_state);
#ifdef VERBOSE_STATE_MACHINE
   BOOST_LOG_TRIVIAL(debug) <<  stm._machine_name << "current state is now .Coinbase.Engage.Initialize";
#endif
      stm._coinbase_state._engage_state._initialize_state._completion(stm);
  }

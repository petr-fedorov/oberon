class Size_change_State
!!!1373958.cpp!!!	_completion(inout stm : SizeDeducer) : bool
  if (!std::isnan(stm.previous_size_)) {
    for(auto s = stm._current_state; s != this && s; s = s->_upper(stm)) s->_doexit(stm);
    stm._sizededucer_state._deduce_state._doexit(stm);
#ifdef VERBOSE_STATE_MACHINE
   BOOST_LOG_TRIVIAL(debug) <<  stm._machine_name << "execute activity of transition success";
#endif
if (!std::isnan(stm.em_->remaining()))
 stm.em_->change(stm.previous_size_ - stm.em_->remaining());
else {
 BOOST_LOG_TRIVIAL(warning) << stm._machine_name << " Remaining size was NA: " << stm.em_->toString();
 stm.em_->change(stm.previous_size_ );
}

    stm._set_currentState(stm._sizededucer_state._save_state);
#ifdef VERBOSE_STATE_MACHINE
   BOOST_LOG_TRIVIAL(debug) <<  stm._machine_name << "current state is now .SizeDeducer.Save";
#endif
    stm._sizededucer_state._save_state.create(stm);
    return (bool) 1;
  }
  else if (std::isnan(stm.previous_size_)) {
    for(auto s = stm._current_state; s != this && s; s = s->_upper(stm)) s->_doexit(stm);
    stm._set_currentState(stm._sizededucer_state._deduce_state);
#ifdef VERBOSE_STATE_MACHINE
   BOOST_LOG_TRIVIAL(debug) <<  stm._machine_name << "current state is now .SizeDeducer.Deduce";
#endif
    stm._sizededucer_state._deduce_state._exit1(stm);
    return (bool) 1;
  }
  return (bool) 0;
!!!1374342.cpp!!!	create(inout stm : SizeDeducer) : void
	_completion(stm);
!!!1374470.cpp!!!	_upper(inout stm : SizeDeducer) : SizeDeducer::AnyState
  return &stm._sizededucer_state._deduce_state;

class CoinbaseReconstructor
!!!576134.cpp!!!	extract(in tree : ptree [1]) : MessageHandler::Message [1..*]
using namespace date;
using namespace std;
vector<unique_ptr<Message>> output;
try {
  Timestamp timestamp = toTimestamp(tree.get<string>("time"));
  string type = tree.get<string>("type");
  if (type == "elapsed")
    output.push_back(make_unique<Elapsed>(timestamp));
  else if (type == "received")
    output.push_back(make_unique<CoinbaseReceived>(tree, *this));
  else if (type == "open")
    output.push_back(make_unique<CoinbaseOpen>(tree, *this));
  else if (type == "done") {
    if (tree.get<string>("reason") == "canceled")
      output.push_back(make_unique<CoinbaseDoneCanceled>(tree, *this));
  } else if (type == "match") {
    output.push_back(make_unique<CoinbaseMatch>(tree, *this));
  } else if (type == "era") {
    output.push_back(make_unique<CoinbaseEra>(tree, *this));
  }
} catch (const std::exception & e) {
  std::stringstream s;
  boost::property_tree::write_json(s, tree, false);
  std::string msg { s.str() };
  BOOST_LOG_TRIVIAL(error) << "Exception " << e.what() << " while processing " << s.str();
  throw;
};
return size_deducer_->handle(move(output));
!!!582918.cpp!!!	CoinbaseReconstructor(in store : Store, in base_min_size : Volume, in base_increment : Volume, in extract_only : bool)
store_ = store;
base_min_size_ = base_min_size;
base_increment_ = base_increment;
extract_only_ = extract_only;
size_deducer_ = std::make_unique<Deduce_Size_Coinbase>();
size_deducer_->create();
// Deduplication is not needed for CoinBase
deduplicator_ = std::unique_ptr<MessageHandler>();
event_number_generator_ = std::make_unique<EventNumberGenerator>();

class Reconstructor
!!!576134.cpp!!!	extract(in tree : ptree [1]) : Token [1..*]
using namespace date;
using namespace std;
Token empty;
boost::uuids::string_generator gen;
auto output = boost::make_unique<OrderEvent>();
try {
  string type = tree.get<string>("type");
  if (type == "elapsed")
    return boost::make_unique<Elapsed>(toTimestamp(tree.get<string>("time")));
  else if (type == "received") {
    updateCommonAttributes(*output, tree);
    output->maker(gen(tree.get<string>("order_id")));
    output->change(0);
    output->ordinal(1);
    if (tree.get<string>("order_type") == "limit")
      output->remaining(stod(tree.get("size", "0.0")));
    output->source(tree.get<string>("source"));
    assert(output->isOrderCreated());
    return std::move(output);
  } else if (type == "open") {
    updateCommonAttributes(*output, tree);
    output->maker(gen(tree.get<string>("order_id")));
    output->remaining(stod(tree.get<string>("remaining_size")));
    output->change(0);
    output->ordinal(1);
    output->state(OrderEvent::OrderState::kActive);
    output->source(tree.get<string>("source"));
    assert(output->isOrderCreated());
    return std::move(output);
  } else if (type == "done") {
    output->timestamp(toTimestamp(tree.get<std::string>("time")));
    output->heard(toTimestamp(tree.get<std::string>("local_timestamp")));

    output->side(tree.get<std::string>("side") == "buy"
                     ? BookSide::kBid
                     : BookSide::kAsk);
    try {
     output->price(stod(tree.get("price", "0.0")));
    }
    catch (...) {};
    output->maker(gen(tree.get<string>("order_id")));
    output->state(OrderEvent::OrderState::kFinished);
    if (tree.get<string>("reason") == "canceled") {
     try{
      output->remaining(stod(tree.get<string>("remaining_size")));
     }
     catch (...) {};
      output->change(0);
    } else
      output->deleted(true);
    output->source(tree.get<string>("source"));
    assert(output->isOrderCancelled());
    return std::move(output);
  } else if (type == "match") {
    updateCommonAttributes(*output, tree);
    output->change(stod(tree.get<string>("size")));
    output->trade(stol(tree.get<string>("trade_id")));
    output->maker(gen(tree.get<string>("maker_order_id")));
    output->taker(gen(tree.get<string>("taker_order_id")));
    output->source(tree.get<string>("source"));
    assert(output->isOrderFilled());
    return std::move(output);
  } else if (type == "change") {
    output->timestamp(toTimestamp(tree.get<std::string>("time")));
    output->heard(toTimestamp(tree.get<std::string>("local_timestamp")));
    output->side(tree.get<std::string>("side") == "buy" ? BookSide::kBid : BookSide::kAsk);
    output->maker(gen(tree.get<string>("order_id")));

    if(!tree.get<std::string>("price").empty()) {
      output->price(stod(tree.get("price", "0.0")));
      output->state(OrderEvent::OrderState::kActive);
    }
    else // it is a market order
      output->deleted(true);

    output->change(0);
    try {
      output->remaining(stod(tree.get<string>("new_size")));
    } catch (...) {
    };
    output->source(tree.get<string>("source"));
    assert(output->isOrderChanged());
    return std::move(output);
  } else if (type == "era") {
    return boost::make_unique<Era>(
        toTimestamp(tree.get<string>("time")), tree.get<string>("exchange"),
        tree.get<string>("product"), tree.get<double>("quote_increment"),
        tree.get<double>("base_increment"));
  } else if (type == "reset") {
    return boost::make_unique<Reset>(next_->exchange_time());
  }
} catch (const std::exception &e) {
  std::stringstream s;
  boost::property_tree::write_json(s, tree, false);
  std::string msg{s.str()};
  BOOST_LOG_TRIVIAL(error) << "Exception " << e.what() << " while processing "
                           << s.str();
  throw;
};
std::stringstream s;
boost::property_tree::write_json(s, tree, false);
BOOST_LOG_TRIVIAL(error) << "Unable to extract: " << s.str();
return empty;
!!!1446534.cpp!!!	updateCommonAttributes(inout event : OrderEvent, in tree : ptree) : void
event.timestamp(toTimestamp(tree.get<std::string>("time")));
event.heard(toTimestamp(tree.get<std::string>("local_timestamp")));

event.side(tree.get<std::string>("side") == "buy" ? BookSide::kBid : BookSide::kAsk);
event.price(stod(tree.get("price", "0.0")));


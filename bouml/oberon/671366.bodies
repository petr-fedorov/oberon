class Classifier
!!!844166.cpp!!!	opened() : bool
BitstampOpened *msg = dynamic_cast<BitstampOpened*>(received_.get());
if(msg->side() == OrderEvent::BookSide::kBid)
  return classifyOpened(&bids_, &asks_);
else
  return classifyOpened(&asks_, &bids_);
!!!844294.cpp!!!	classifyOpened(inout us : U, inout them : T) : bool
BitstampOpened *opened = dynamic_cast<BitstampOpened *>(received_.get());
#ifdef VERBOSE_BITSTAMP_CLASSIFIER
std::cout << opened->toString() << "\n";
#endif
auto comp = them -> key_comp();
prices_.insert(decltype(prices_)::value_type{opened->maker(),
                                             opened->price()});
if (!them->empty() && !comp(opened->price(), them->begin()->first)) {
#ifdef VERBOSE_BITSTAMP_CLASSIFIER
  std::cout << them ->begin()->second->toString() << " them best \n";
#endif
#ifdef VERBOSE_BITSTAMP_CLASSIFIER
  std::cout << opened->toString() << "\nDropped\n";
#endif
  received_->deleted(true);
  us->insert(typename std::remove_reference<decltype(*us)>::type::value_type{
      opened->price(), std::unique_ptr<OrderEvent>(opened->clone())});
  //received_.reset(nullptr);
  output_.push_back(std::move(received_));
} else {
#ifdef VERBOSE_BITSTAMP_CLASSIFIER
  std::cout << opened->toString() << "\nOutput\n";
#endif
  us->insert(typename std::remove_reference<decltype(*us)>::type::value_type{
      opened->price(), std::unique_ptr<OrderEvent>(opened->clone())});
  output_.push_back(std::move(received_));
}
return true;
!!!844678.cpp!!!	changed() : bool
BitstampChanged *msg = dynamic_cast<BitstampChanged *>(received_.get());
if(msg->side() == OrderEvent::BookSide::kBid)
  return classifyChanged(&bids_, &asks_);
else
  return classifyChanged(&asks_, &bids_);
!!!844806.cpp!!!	classifyChanged(inout us : U, inout them : T) : bool
BitstampChanged *msg = dynamic_cast<BitstampChanged *>(received_.get());
#ifdef VERBOSE_BITSTAMP_CLASSIFIER
std::cout << msg->toString() << "\n";
#endif
auto comp = them -> key_comp();
OrderEvent::Price previous_price = 0.0;
OrderEvent::Volume previous_volume = 0.0;
try {
  previous_price = prices_.at(msg->maker());
  for (auto iter = us->lower_bound(previous_price);
       iter != us->end() && iter->first == previous_price; ++iter)
    if (iter->second->maker() == msg->maker()) {
      previous_volume = iter->second->remaining();
#ifdef VERBOSE_BITSTAMP_CLASSIFIER
      std::cout  << iter->second->toString()<< " removed from LOB \n";
#endif
      us->erase(iter);
      break;
    }
} catch (const std::out_of_range &) {
#ifdef VERBOSE_BITSTAMP_CLASSIFIER
      std::cout  << "Previous price not found\n";
#endif
}

prices_[msg->maker()] = msg->price();

if (!them->empty() &&
    !comp(msg->price(), them->begin()->second->price())) {
#ifdef VERBOSE_BITSTAMP_CLASSIFIER
  std::cout << them ->begin()->second->toString() <<" them best \n";
#endif
  received_->deleted(true);
  us->insert(typename std::remove_reference<decltype(*us)>::type::value_type{
      msg->price(), std::unique_ptr<OrderEvent>(msg->clone())});
#ifdef VERBOSE_BITSTAMP_CLASSIFIER
  std::cout << msg->toString() <<" added to LOB \nDropped\n";
#endif
  // received_.release();
  output_.push_back(std::move(received_));
} else {
  us->insert(typename std::remove_reference<decltype(*us)>::type::value_type{
      msg->price(), std::unique_ptr<OrderEvent>(msg->clone())});
#ifdef VERBOSE_BITSTAMP_CLASSIFIER
  std::cout << msg->toString() <<" added to LOB \nOutput\n";
#endif
  output_.push_back(std::move(received_));
}
return true;
!!!844934.cpp!!!	canceled() : bool
BitstampCanceled *msg = dynamic_cast<BitstampCanceled *>(received_.get());
if(msg->side() == OrderEvent::BookSide::kBid)
  return classifyCanceled(&bids_, &asks_);
else
  return classifyCanceled(&asks_, &bids_);

!!!845062.cpp!!!	classifyCanceled(inout us : U, inout them : T) : bool
BitstampCanceled *msg = dynamic_cast<BitstampCanceled *>(received_.get());
#ifdef VERBOSE_BITSTAMP_CLASSIFIER
std::cout << msg->toString() << "\n";
#endif
try {
  auto previous_price = prices_.at(msg->maker());
  for (auto iter = us->lower_bound(previous_price);
       iter != us->end() && iter->first == previous_price; ++iter)
    if (iter->second->maker() == msg->maker()) {
#ifdef VERBOSE_BITSTAMP_CLASSIFIER
      std::cout << iter->second->toString()<< " removed from LOB\n";
#endif
      auto comp = them->key_comp();
      if(!iter->second->deleted() && (them->empty() || comp(previous_price, them->begin()->second->price()))) {
#ifdef VERBOSE_BITSTAMP_CLASSIFIER
        std::cout << "Output\n";
#endif
        output_.push_back(std::move(received_));
      }
      else {
#ifdef VERBOSE_BITSTAMP_CLASSIFIER
        std::cout << "Dropped\n";
#endif
        received_->deleted(true);
        output_.push_back(std::move(received_));
      }
      us->erase(iter);
      break;
    }
} catch (const std::out_of_range &) {

#ifdef VERBOSE_BITSTAMP_CLASSIFIER
  std::cout << "Previous price not found\nDropped\n";
#endif
}
return true;
!!!851846.cpp!!!	filled() : bool
Filled *msg = dynamic_cast<Filled*>(received_.get());
if(msg->side() == OrderEvent::BookSide::kBid)
  return classifyFilled(&bids_, &asks_);
else
  return classifyFilled(&asks_, &bids_);
!!!851974.cpp!!!	classifyFilled(in us : U, in them : T) : bool
Filled *msg = dynamic_cast<Filled *>(received_.get());
#ifdef VERBOSE_BITSTAMP_CLASSIFIER
std::cout << msg->toString() << "\n";
#endif
OrderEvent::Price previous_price = 0.0;
OrderEvent::Volume previous_volume = 0.0;
try {
  previous_price = prices_.at(msg->maker());
  for (auto iter = us->lower_bound(previous_price);
       iter != us->end() && iter->second->price() == previous_price;
       ++iter) {
    if (iter->second->maker() == msg->maker()) {
      previous_volume = iter->second->remaining();
#ifdef VERBOSE_BITSTAMP_CLASSIFIER
      std::cout << iter->second->toString()<< " removed from LOB\n";
#endif
      us->erase(iter);
      break;
    }
  }
} catch (const std::out_of_range &) {
#ifdef VERBOSE_BITSTAMP_CLASSIFIER
  std::cout << "Previous price not found\n";
#endif
}
/* 
if(msg->remaining() >= reconstructor_.base_min_size_) {
#ifdef VERBOSE_BITSTAMP_CLASSIFIER
  std::cout << "Added to LOB\n";
#endif
  us->insert(typename std::remove_reference<decltype(*us)>::type::value_type{
      msg->price(), std::unique_ptr<OrderEvent>(msg->clone())});
}
*/
output_.push_back(std::move(received_));
#ifdef VERBOSE_BITSTAMP_CLASSIFIER
std::cout << "Output\n";
#endif
return true;

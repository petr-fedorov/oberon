class File
!!!1072262.cpp!!!	File(in exchange : string, in product : string, in base_precision : int, in quote_precision : int)

!!!1072134.cpp!!!	~File()
f_.close();
!!!1072390.cpp!!!	orderEvent() : bool
using namespace oberon::reconstructor;
using boost::uuids::to_string;
using std::chrono::duration;
using std::chrono::duration_cast;
std::stringstream buffer;

OrderEvent *event = dynamic_cast<OrderEvent *>(received_.get());

// "i,n,t,s,p,v,f,delta_v,taker_i, local_t\n";
if (event) {

  int sign = event->side() == OrderEvent::BookSide::kAsk ? -1 : 1;

  // i
  if (event->maker() != OrderEvent::kNaOrderId)
    if (event->maker() != boost::uuids::nil_uuid())
      buffer << to_string(event->maker()) << ",";
    else
      buffer << ",";
  else
    buffer << "NA,";

  // n
  if (event->ordinal() != OrderEvent::kNaEventNo)
    buffer << event->ordinal() << ",";
  else
    buffer << "NA,";

  // t
  date::to_stream(buffer, "%FT%TZ,", event->timestamp());

  // s
  buffer << event->state() << ",";

  // p
  buffer << std::fixed << std::setprecision(quote_precision_) << event->price() << ",";

  // v
  buffer << std::fixed << std::setprecision(base_precision_) << sign*event->remaining() << ",";

  // f
  if (event->trade() != OrderEvent::kNaTradeId)
    buffer << event->trade() << ",";
  else
    buffer << "NA,";

  // delta_v
  buffer << std::fixed << std::setprecision(base_precision_) << sign*event->change() << ",";

  // taker_i
  if (event->taker() != OrderEvent::kNaOrderId)
    if (event->taker() != boost::uuids::nil_uuid())
      buffer << to_string(event->taker()) << ",";
    else
      buffer << ",";
  else
    buffer << "NA,";

  // local_t
  date::to_stream(buffer, "%FT%TZ,", event->local());

  buffer << "\n";
  return (f_ << buffer.str()).good();
}
return true;
!!!1092358.cpp!!!	era() : bool
using namespace date;
Era *era = dynamic_cast<Era *>(received_.get());
if(f_.is_open())
  f_.close();
f_.open(exchange_ + "_" + product_ + "_" + format("%FT%H-%M-%SZ", era->timestamp()));
f_ << "i,n,t,s,p,v,f,delta_v,taker_i, local_t\n";
return f_.is_open();

class Connect_State
!!!1107462.cpp!!!	success(inout stm : CoinbaseReceiver) : void
  {
    for(auto s = stm._current_state; s != this && s; s = s->_upper(stm)) s->_doexit(stm);
    stm._set_currentState(stm._coinbasereceiver_state._engage_state._subscribed_state._snapshot_state._handshake_ssl_state);
#ifdef VERBOSE_STATE_MACHINE
   BOOST_LOG_TRIVIAL(debug) <<  stm._machine_name << "current state is now .CoinbaseReceiver.Engage.Subscribed.Snapshot.Handshake SSL";
#endif
    stm._coinbasereceiver_state._engage_state._subscribed_state._snapshot_state._handshake_ssl_state.create(stm);
  }
!!!1107590.cpp!!!	create(inout stm : CoinbaseReceiver) : void
	_doentry(stm);
!!!1107718.cpp!!!	_doentry(inout stm : CoinbaseReceiver) : void
#ifdef VERBOSE_STATE_MACHINE
   BOOST_LOG_TRIVIAL(debug) <<  stm._machine_name << "execute entry behavior of .CoinbaseReceiver.Engage.Subscribed.Snapshot.Connect";
#endif
boost::asio::async_connect(
    stm.https_->next_layer(), stm.results_.begin(), stm.results_.end(),
    boost::asio::bind_executor(
        *stm.rtc_, [&stm](const boost::system::error_code &ec,
                          decltype(stm.results_)::iterator iter) {
          if (ec) {
            stm.ec_ = ec;
            stm.error_message_ = ec.message();
            stm.failure();
          } else {
#ifdef DEBUG
            BOOST_LOG_TRIVIAL(debug) << "IP: " << iter->endpoint().address().to_string()
                      << " Port: " << iter->endpoint().port() << "\n";
#endif
            stm.https_address_ = iter->endpoint().address();
            stm.success();
          }
        }));
!!!1107846.cpp!!!	_upper(inout stm : CoinbaseReceiver) : CoinbaseReceiver::AnyState
  return &stm._coinbasereceiver_state._engage_state._subscribed_state._snapshot_state;

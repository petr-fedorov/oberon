class Subscribe_State
!!!1201926.cpp!!!	success(inout stm : Feeder) : void
  {
    for(auto s = stm._current_state; s != this && s; s = s->_upper(stm)) s->_doexit(stm);
#ifdef VERBOSE_STATE_MACHINE
   BOOST_LOG_TRIVIAL(debug) <<  stm._machine_name << "execute activity of transition success";
#endif
if (stm.d_->sh_)
  stm.d_->sh_();
stm.d_->last_sequence_ = 0;
stm.d_->timer_->expires_after(std::chrono::seconds(5));
stm.d_->timer_->async_wait(boost::asio::bind_executor(
    *stm.d_->strand_, [&stm](const boost::system::error_code &ec) {
      if (ec != boost::asio::error::operation_aborted) {
        stm.exhausted();
      }
    }));
using frame_type = boost::beast::websocket::frame_type;

stm.d_->ws_->control_callback(boost::asio::bind_executor(
    *stm.d_->strand_,
    [&stm](frame_type kind, boost::beast::string_view payload) {
      std::string kind_str;
      if (kind == frame_type::pong) {
#ifndef NDEBUG
      BOOST_LOG_TRIVIAL(debug)
          << stm._machine_name << "pong received";
#endif
        if (stm.d_->timer_->expires_after(
                std::chrono::seconds(stm.d_->exhausted_after)) > 0) {
          // We managed to cancel the timer. Start new asynchronous wait.
          stm.d_->timer_->async_wait(boost::asio::bind_executor(
              *stm.d_->strand_, [&stm](const boost::system::error_code &ec) {
                if (ec != boost::asio::error::operation_aborted)
                  stm.check();
              }));
        }
        stm.pong();
      }
    }));

    stm._set_currentState(stm._feeder_state._busy_state._receive_state);
#ifdef VERBOSE_STATE_MACHINE
   BOOST_LOG_TRIVIAL(debug) <<  stm._machine_name << "current state is now .Feeder.Busy.Receive";
#endif
    stm._feeder_state._busy_state._receive_state.create(stm);
  }
!!!1202054.cpp!!!	_upper(inout stm : Feeder) : Feeder::AnyState
  return &stm._feeder_state._busy_state;
!!!1206790.cpp!!!	create(inout stm : Feeder) : void
	_doentry(stm);
!!!1206918.cpp!!!	_doentry(inout stm : Feeder) : void
#ifdef VERBOSE_STATE_MACHINE
   BOOST_LOG_TRIVIAL(debug) <<  stm._machine_name << "execute entry behavior of .Feeder.Busy.Subscribe";
#endif
stm.subscribe();

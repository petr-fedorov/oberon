class Receiver
!!!1344134.cpp!!!	Receiver(in ioc : io_context_SP, in feeder : Feeder::Feeder_SP, in snapshot : Snapshot::Snapshot_SP, inout processor : ConsumerFn, in exchange : string, in product : string, in quote_increment : string, in base_increment : string)
_machine_name = "BitstampReceiver - ";
!!!1344262.cpp!!!	isStale() : bool
using namespace std::chrono;
BOOST_LOG_TRIVIAL(info) <<   "Snapshot timestamp: " << date::format("%FT%TZ", time_point<system_clock, microseconds>{microseconds{d_->snapshot_tree_->get<long long>("microtimestamp")}});
if(!d_->messages_.empty())
  BOOST_LOG_TRIVIAL(info) << "Feeder timestamp  : " << date::format( "%FT%TZ", time_point<system_clock, microseconds>{microseconds{ d_->messages_.front()->get<long long>("data.microtimestamp")}});
return !d_->messages_.size() ||
       d_->messages_.front()->get<long long>("data.microtimestamp") >=
           d_->snapshot_tree_->get<long long>("microtimestamp");
!!!1344390.cpp!!!	saveSnapshot() : void
auto self = shared_from_this();

// Start new era in another thread since it takes a lot of time ...
boost::asio::post(boost::asio::bind_executor(
    *d_->processing_strand_, [this, self]() {
      this->d_->stop_thread_.store(false);

      try {
        boost::property_tree::ptree era;
        auto era_time = this->d_->snapshot_tree_->get<std::string>("microtimestamp");
        auto local_timestamp = this->d_->snapshot_tree_->get<std::string>("local_timestamp");

        era.put<std::string>("event", "era");
        era.put<std::string>("microtimestamp", era_time);
        era.put<std::string>("local_timestamp", local_timestamp);
        era.put<std::string>("exchange", d_->exchange);
        era.put<std::string>("product", d_->product);
        era.put<std::string>("quote_increment", d_->quote_increment);
        era.put<std::string>("base_increment",d_->base_increment );
        if (!this->d_->process(era))
          throw std::logic_error("Couldn't process era message");

        boost::property_tree::ptree order_tree;

        for (auto iter = this->d_->snapshot_tree_->get_child("bids").begin();
             iter != this->d_->snapshot_tree_->get_child("bids").end() &&
             !this->d_->stop_thread_;
             ++iter) {
          order_tree.clear();
          order_tree.put<std::string>("data.microtimestamp", era_time);
          order_tree.put<std::string>("event", "order_created");
          order_tree.put<std::string>("data.order_type", "0");

          std::stringstream ss {};
          boost::property_tree::write_json(ss, iter->second, false);
          std::string source = "B " + ss.str();
          source.pop_back();
          order_tree.put<std::string>("source",source);

          auto iter2 = iter->second.begin();
          order_tree.put<std::string>("data.price_str",
                                      iter2++->second.get_value<std::string>());
          order_tree.put<std::string>("data.amount_str",
                                      iter2++->second.get_value<std::string>());
          order_tree.put<std::string>("data.id_str",
                                      iter2++->second.get_value<std::string>());
          order_tree.put<std::string>("local_timestamp", local_timestamp);
          if (!this->d_->process(order_tree))
            throw std::logic_error("Couldn't process bid message");
        }
        for (auto iter = this->d_->snapshot_tree_->get_child("asks").begin();
             iter != this->d_->snapshot_tree_->get_child("asks").end() &&
             !this->d_->stop_thread_;
             ++iter) {
          order_tree.clear();
          order_tree.put<std::string>("data.microtimestamp", era_time);
          order_tree.put<std::string>("event", "order_created");
          order_tree.put<std::string>("data.order_type", "1");

          std::stringstream ss {};
          boost::property_tree::write_json(ss, iter->second, false);
          std::string source = "A " + ss.str();
          source.pop_back();
          order_tree.put<std::string>("source",source);

          auto iter2 = iter->second.begin();
          order_tree.put<std::string>("data.price_str",
                                      iter2++->second.get_value<std::string>());
          order_tree.put<std::string>("data.amount_str",
                                      iter2++->second.get_value<std::string>());
          order_tree.put<std::string>("data.id_str",
                                      iter2++->second.get_value<std::string>());
          order_tree.put<std::string>("local_timestamp", local_timestamp);
          if (!this->d_->process(order_tree))
            throw std::logic_error("Couldn't process ask message");
        }
        if (!this->d_->stop_thread_) // We don't care too much about race
                                     // condition here
          this->postEvent(&Receiver::success);
        else
          this->_post([this, self]() {
            this->d_->error_message_ =
                "Snapshot saved has been stopped, exiting ...";
            this->failure();
          });
      } catch (const std::logic_error &e) {
        std::string w{e.what()};
        this->_post([this, self, w]() {
          this->d_->error_message_ = w;
          this->stop(); // We can't process received messages, so we stop the
                        // machine
        });
      } catch (const std::exception &e) {
        std::string w{e.what()};
        this->_post([this, self, w]() {
          this->d_->error_message_ = w;
          this->failure();
        });

      } catch (...) {
        this->_post([this, self]() {
          this->d_->error_message_ =
              "Snapshot saved failed due to an exception, exiting ...";
          this->failure();
        });
      }
    }));

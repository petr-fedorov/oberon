class Subsribe_live_orders_State
!!!1321606.cpp!!!	success(inout stm : Feeder) : void
  {
    for(auto s = stm._current_state; s != this && s; s = s->_upper(stm)) s->_doexit(stm);
#ifdef VERBOSE_STATE_MACHINE
   BOOST_LOG_TRIVIAL(debug) <<  stm._machine_name << "execute activity of transition <transition>";
#endif
if(stm.d_->sh_) stm.d_->sh_();
using boost::posix_time::seconds;
stm.d_->timer_->expires_from_now(seconds(5));
stm.d_->timer_->async_wait(boost::asio::bind_executor(
    *stm.d_->strand_, [&stm](const boost::system::error_code &ec) {
      if (ec != boost::asio::error::operation_aborted) {
        stm.exhausted();
      }
    }));
    stm._set_currentState(stm._feeder_state._busy_state._receive_state);
#ifdef VERBOSE_STATE_MACHINE
   BOOST_LOG_TRIVIAL(debug) <<  stm._machine_name << "current state is now .Feeder.Busy.Receive";
#endif
    stm._feeder_state._busy_state._receive_state.create(stm);
  }
!!!1321734.cpp!!!	create(inout stm : Feeder) : void
	_doentry(stm);
!!!1321862.cpp!!!	_doentry(inout stm : Feeder) : void
#ifdef VERBOSE_STATE_MACHINE
   BOOST_LOG_TRIVIAL(debug) <<  stm._machine_name << "execute entry behavior of .Feeder.Busy.Subsribe live_orders";
#endif
using namespace boost::property_tree;
ptree tree, c;
std::ostringstream request;
tree.put("event", "bts:subscribe");
c.put("channel", "live_orders_"+ stm.d_->product_);
tree.add_child("data",c); 
write_json(request, tree, false);

#ifndef NDEBUG
BOOST_LOG_TRIVIAL(debug) << "Request: " << request.str();
#endif
stm.d_->ws_->async_write(
    boost::asio::buffer(request.str()),
    boost::asio::bind_executor(*stm.d_->strand_,
                               [&stm](const boost::system::error_code &ec,
                                      std::size_t bytes_transferred) {
                                 boost::ignore_unused(bytes_transferred);
                                 if (ec) {
				   stm.d_->ec_ = ec;
				   stm.d_->error_message_ = ec.message();
                                   stm.failure();
				   }
                                 else
                                   stm.success();
                               }));


!!!1321990.cpp!!!	_upper(inout stm : Feeder) : Feeder::AnyState
  return &stm._feeder_state._busy_state;

format 224
"Reconstructor" // Tests::Reconstructor
  revision 3
  modified_by 6 "petr"
  // class settings
  
  classdiagramsettings member_max_width 0 end
  
  classcompositediagramsettings end
  
  usecasediagramsettings end
  
  sequencediagramsettings end
  
  collaborationdiagramsettings end
  
  objectdiagramsettings end
  
  objectcompositediagramsettings end
  
  componentdiagramsettings
   end
  
  deploymentdiagramsettings
   end
  
  statediagramsettings
   end
  
  activitydiagramsettings
   end
  
  cpp_h_dir "cpp/reconstructor"
  cpp_src_dir "cpp/reconstructor"
  cpp_namespace "oberon::reconstructor"
  classview 326790 "Fixtures"
    
    classdiagramsettings member_max_width 0 end
    
    classcompositediagramsettings end
    
    collaborationdiagramsettings end
    
    objectdiagramsettings end
    
    objectcompositediagramsettings end
    
    sequencediagramsettings end
    
    statediagramsettings
     end
    
    
    activitydiagramsettings
     end
    classdiagram 499078 "Fixtures"
      classdiagramsettings member_max_width 0 end
      size A4
    end

    class 1060870 "OrderEventFixture"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl "${comment}struct ${name} {
${members}};
"
      explicit_switch_type ""
      mysql_decl ""
      
      classrelation 1231622 // event1 (<directional composition>)
	relation 1221254 *-->
	  stereotype "unique_ptr"
	  a role_name "event1" multiplicity "0..1" public
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	    classrelation_ref 1231622 // event1 (<directional composition>)
	  b parent class_ref 448390 // OrderEvent
      end

      operation 1545862 "OrderEventFixture"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${typeprefix}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${typeprefix}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	
	
	
	
      end

      operation 1545990 "~OrderEventFixture"
	cpp_virtual public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${typeprefix}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${typeprefix}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	
	
	
	
      end
    end
  end

  deploymentview 213510 "Source files"
    //deployment diagram settings
    deploymentdiagramsettings
     end
    artifact 360838 "test_OrderEvent"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
#include <boost/test/unit_test.hpp>
#include <boost/smart_ptr/make_unique.hpp>
${includes}
${namespace_start}
${members}
${namespace_end}

using namespace oberon::reconstructor;
using OrderState=OrderEvent::OrderState;

BOOST_AUTO_TEST_CASE( remaining_may_be_equal_to_base_increment )
{
  OrderEvent f;
  OrderEvent::Volume base_increment = 0.00000001;

  f.baseIncrement(base_increment);
  double r1 = 1234.00391902;
  double r2 = 1234.00391901;
  f.remaining(r1-r2);
  BOOST_TEST( f.remaining() == base_increment, boost::test_tools::tolerance(0.0001));
}

BOOST_AUTO_TEST_CASE(order_event_type_111)
{
  OrderEvent f;
  f.ordinal(0); 
  f.state(OrderState::kActive);
  f.trade(0);

  BOOST_TEST(!f.isOrderCreated());
  BOOST_TEST(f.isOrderChanged());
  BOOST_TEST(!f.isOrderCancelled());
  BOOST_TEST(!f.isOrderFilled());
}

BOOST_AUTO_TEST_CASE(order_event_type_112)
{
  OrderEvent f;
  f.ordinal(0); 
  f.state(OrderState::kActive);
  f.trade(1);

  BOOST_TEST(!f.isOrderCreated());
  BOOST_TEST(!f.isOrderChanged());
  BOOST_TEST(!f.isOrderCancelled());
  BOOST_TEST(f.isOrderFilled());
}

BOOST_AUTO_TEST_CASE(order_event_type_121)
{
  OrderEvent f;
  f.ordinal(0); 
  f.state(OrderState::kFinished);
  f.trade(0);

  BOOST_TEST(!f.isOrderCreated());
  BOOST_TEST(!f.isOrderChanged());
  BOOST_TEST(f.isOrderCancelled());
  BOOST_TEST(!f.isOrderFilled());
}

BOOST_AUTO_TEST_CASE(order_event_type_122)
{
  OrderEvent f;
  f.ordinal(0); 
  f.state(OrderState::kFinished);
  f.trade(1);

  BOOST_TEST(!f.isOrderCreated());
  BOOST_TEST(!f.isOrderChanged());
  BOOST_TEST(!f.isOrderCancelled());
  BOOST_TEST(f.isOrderFilled());
}

BOOST_AUTO_TEST_CASE(order_event_type_131)
{
  OrderEvent f;
  f.ordinal(0); 
  f.state(OrderState::kNA);
  f.trade(0);

  BOOST_TEST(!f.isOrderCreated());
  BOOST_TEST(f.isOrderChanged());
  BOOST_TEST(!f.isOrderCancelled());
  BOOST_TEST(!f.isOrderFilled());
}

BOOST_AUTO_TEST_CASE(order_event_type_132)
{
  OrderEvent f;
  f.ordinal(0); 
  f.state(OrderState::kNA);
  f.trade(1);

  BOOST_TEST(!f.isOrderCreated());
  BOOST_TEST(!f.isOrderChanged());
  BOOST_TEST(!f.isOrderCancelled());
  BOOST_TEST(f.isOrderFilled());
}

BOOST_AUTO_TEST_CASE(order_event_type_211)
{
  OrderEvent f;
  f.ordinal(1); 
  f.state(OrderState::kActive);
  f.trade(0);

  BOOST_TEST(f.isOrderCreated());
  BOOST_TEST(!f.isOrderChanged());
  BOOST_TEST(!f.isOrderCancelled());
  BOOST_TEST(!f.isOrderFilled());
}

BOOST_AUTO_TEST_CASE(order_event_type_212)
{
  OrderEvent f;
  f.ordinal(1); 
  f.state(OrderState::kActive);
  f.trade(1);

  BOOST_TEST(!f.isOrderCreated());
  BOOST_TEST(!f.isOrderChanged());
  BOOST_TEST(!f.isOrderCancelled());
  BOOST_TEST(f.isOrderFilled());
}

BOOST_AUTO_TEST_CASE(order_event_type_221)
{
  OrderEvent f;
  f.ordinal(1); 
  f.state(OrderState::kFinished);
  f.trade(0);

  BOOST_TEST(!f.isOrderCreated());
  BOOST_TEST(!f.isOrderChanged());
  BOOST_TEST(f.isOrderCancelled());
  BOOST_TEST(!f.isOrderFilled());
}

BOOST_AUTO_TEST_CASE(order_event_type_222)
{
  OrderEvent f;
  f.ordinal(1); 
  f.state(OrderState::kFinished);
  f.trade(1);

  BOOST_TEST(!f.isOrderCreated());
  BOOST_TEST(!f.isOrderChanged());
  BOOST_TEST(!f.isOrderCancelled());
  BOOST_TEST(f.isOrderFilled());
}

BOOST_AUTO_TEST_CASE(order_event_type_231)
{
  OrderEvent f;
  f.ordinal(1); 
  f.state(OrderState::kNA);
  f.trade(0);

  BOOST_TEST(f.isOrderCreated());
  BOOST_TEST(!f.isOrderChanged());
  BOOST_TEST(!f.isOrderCancelled());
  BOOST_TEST(!f.isOrderFilled());
}

BOOST_AUTO_TEST_CASE(order_event_type_232)
{
  OrderEvent f;
  f.ordinal(1); 
  f.state(OrderState::kNA);
  f.trade(1);

  BOOST_TEST(!f.isOrderCreated());
  BOOST_TEST(!f.isOrderChanged());
  BOOST_TEST(!f.isOrderCancelled());
  BOOST_TEST(f.isOrderFilled());
}

BOOST_AUTO_TEST_CASE(order_event_type_311)
{
  OrderEvent f;
  f.ordinal(2); 
  f.state(OrderState::kActive);
  f.trade(0);

  BOOST_TEST(!f.isOrderCreated());
  BOOST_TEST(f.isOrderChanged());
  BOOST_TEST(!f.isOrderCancelled());
  BOOST_TEST(!f.isOrderFilled());
}

BOOST_AUTO_TEST_CASE(order_event_type_312)
{
  OrderEvent f;
  f.ordinal(2); 
  f.state(OrderState::kActive);
  f.trade(1);

  BOOST_TEST(!f.isOrderCreated());
  BOOST_TEST(!f.isOrderChanged());
  BOOST_TEST(!f.isOrderCancelled());
  BOOST_TEST(f.isOrderFilled());
}

BOOST_AUTO_TEST_CASE(order_event_type_321)
{
  OrderEvent f;
  f.ordinal(2); 
  f.state(OrderState::kFinished);
  f.trade(0);

  BOOST_TEST(!f.isOrderCreated());
  BOOST_TEST(!f.isOrderChanged());
  BOOST_TEST(f.isOrderCancelled());
  BOOST_TEST(!f.isOrderFilled());
}

BOOST_AUTO_TEST_CASE(order_event_type_322)
{
  OrderEvent f;
  f.ordinal(2); 
  f.state(OrderState::kFinished);
  f.trade(1);

  BOOST_TEST(!f.isOrderCreated());
  BOOST_TEST(!f.isOrderChanged());
  BOOST_TEST(!f.isOrderCancelled());
  BOOST_TEST(f.isOrderFilled());
}

BOOST_AUTO_TEST_CASE(order_event_type_331)
{
  OrderEvent f;
  f.ordinal(2); 
  f.state(OrderState::kNA);
  f.trade(0);

  BOOST_TEST(!f.isOrderCreated());
  BOOST_TEST(f.isOrderChanged());
  BOOST_TEST(!f.isOrderCancelled());
  BOOST_TEST(!f.isOrderFilled());
}

BOOST_AUTO_TEST_CASE(order_event_type_332)
{
  OrderEvent f;
  f.ordinal(2); 
  f.state(OrderState::kNA);
  f.trade(1);

  BOOST_TEST(!f.isOrderCreated());
  BOOST_TEST(!f.isOrderChanged());
  BOOST_TEST(!f.isOrderCancelled());
  BOOST_TEST(f.isOrderFilled());
}
"
      associated_elems
	class_ref 1060870 // OrderEventFixture
      end
    end
  end
end

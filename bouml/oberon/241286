format 224
"Reconstructor" // Tests::Reconstructor
  revision 5
  modified_by 6 "petr"
  // class settings
  
  classdiagramsettings member_max_width 0 end
  
  classcompositediagramsettings end
  
  usecasediagramsettings end
  
  sequencediagramsettings end
  
  collaborationdiagramsettings end
  
  objectdiagramsettings end
  
  objectcompositediagramsettings end
  
  componentdiagramsettings
   end
  
  deploymentdiagramsettings
   end
  
  statediagramsettings
   end
  
  activitydiagramsettings
   end
  
  cpp_h_dir "cpp/reconstructor"
  cpp_src_dir "cpp/reconstructor"
  cpp_namespace "oberon::reconstructor"
  classview 326790 "Fixtures"
    
    classdiagramsettings member_max_width 0 end
    
    classcompositediagramsettings end
    
    collaborationdiagramsettings end
    
    objectdiagramsettings end
    
    objectcompositediagramsettings end
    
    sequencediagramsettings end
    
    statediagramsettings
     end
    
    
    activitydiagramsettings
     end
    classdiagram 499078 "Fixtures"
      classdiagramsettings member_max_width 0 end
      size A4
    end

    class 1060870 "OrderEventFixture"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl "${comment}struct ${name} {
${members}};
"
      explicit_switch_type ""
      mysql_decl ""
      
      operation 1545862 "OrderEventFixture"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${typeprefix}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${typeprefix}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	
	
	
	
      end

      operation 1545990 "~OrderEventFixture"
	cpp_virtual public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${typeprefix}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${typeprefix}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	
	
	
	
      end

      attribute 951942 "sec"
	public type class_ref 1067526 // Security_SP
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 952070 "event"
	public type class_ref 1040262 // OrderEvent_UP
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end
  end

  package_ref 247814 // File

  deploymentview 213510 "Source files"
    //deployment diagram settings
    deploymentdiagramsettings
     end
    artifact 360838 "test_OrderEvent"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
#include <boost/test/unit_test.hpp>
#include <boost/smart_ptr/make_unique.hpp>
#include <boost/smart_ptr/make_shared.hpp>
${includes}
${namespace_start}
${members}
${namespace_end}

using namespace oberon::reconstructor;
using OrderState=OrderEvent::OrderState;


BOOST_AUTO_TEST_CASE(order_event_type_111)
{
  OrderEventFixture f;
  f.event->ordinal(0); 
  f.event->state(OrderState::kActive);
  f.event->trade(0);

  BOOST_TEST(!f.event->isOrderCreated());
  BOOST_TEST(f.event->isOrderChanged());
  BOOST_TEST(!f.event->isOrderCancelled());
  BOOST_TEST(!f.event->isOrderFilled());
}

BOOST_AUTO_TEST_CASE(order_event_type_112)
{
  OrderEventFixture f;
  f.event->ordinal(0); 
  f.event->state(OrderState::kActive);
  f.event->trade(1);

  BOOST_TEST(!f.event->isOrderCreated());
  BOOST_TEST(!f.event->isOrderChanged());
  BOOST_TEST(!f.event->isOrderCancelled());
  BOOST_TEST(f.event->isOrderFilled());
}

BOOST_AUTO_TEST_CASE(order_event_type_121)
{
  OrderEventFixture f;
  f.event->ordinal(0); 
  f.event->state(OrderState::kFinished);
  f.event->trade(0);

  BOOST_TEST(!f.event->isOrderCreated());
  BOOST_TEST(!f.event->isOrderChanged());
  BOOST_TEST(f.event->isOrderCancelled());
  BOOST_TEST(!f.event->isOrderFilled());
}

BOOST_AUTO_TEST_CASE(order_event_type_122)
{
  OrderEventFixture f;
  f.event->ordinal(0); 
  f.event->state(OrderState::kFinished);
  f.event->trade(1);

  BOOST_TEST(!f.event->isOrderCreated());
  BOOST_TEST(!f.event->isOrderChanged());
  BOOST_TEST(!f.event->isOrderCancelled());
  BOOST_TEST(f.event->isOrderFilled());
}

BOOST_AUTO_TEST_CASE(order_event_type_131)
{
  OrderEventFixture f;
  f.event->ordinal(0); 
  f.event->state(OrderState::kNA);
  f.event->trade(0);

  BOOST_TEST(!f.event->isOrderCreated());
  BOOST_TEST(f.event->isOrderChanged());
  BOOST_TEST(!f.event->isOrderCancelled());
  BOOST_TEST(!f.event->isOrderFilled());
}

BOOST_AUTO_TEST_CASE(order_event_type_132)
{
  OrderEventFixture f;
  f.event->ordinal(0); 
  f.event->state(OrderState::kNA);
  f.event->trade(1);

  BOOST_TEST(!f.event->isOrderCreated());
  BOOST_TEST(!f.event->isOrderChanged());
  BOOST_TEST(!f.event->isOrderCancelled());
  BOOST_TEST(f.event->isOrderFilled());
}

BOOST_AUTO_TEST_CASE(order_event_type_211)
{
  OrderEventFixture f;
  f.event->ordinal(1); 
  f.event->state(OrderState::kActive);
  f.event->trade(0);

  BOOST_TEST(f.event->isOrderCreated());
  BOOST_TEST(!f.event->isOrderChanged());
  BOOST_TEST(!f.event->isOrderCancelled());
  BOOST_TEST(!f.event->isOrderFilled());
}

BOOST_AUTO_TEST_CASE(order_event_type_212)
{
  OrderEventFixture f;
  f.event->ordinal(1); 
  f.event->state(OrderState::kActive);
  f.event->trade(1);

  BOOST_TEST(!f.event->isOrderCreated());
  BOOST_TEST(!f.event->isOrderChanged());
  BOOST_TEST(!f.event->isOrderCancelled());
  BOOST_TEST(f.event->isOrderFilled());
}

BOOST_AUTO_TEST_CASE(order_event_type_221)
{
  OrderEventFixture f;
  f.event->ordinal(1); 
  f.event->state(OrderState::kFinished);
  f.event->trade(0);

  BOOST_TEST(!f.event->isOrderCreated());
  BOOST_TEST(!f.event->isOrderChanged());
  BOOST_TEST(f.event->isOrderCancelled());
  BOOST_TEST(!f.event->isOrderFilled());
}

BOOST_AUTO_TEST_CASE(order_event_type_222)
{
  OrderEventFixture f;
  f.event->ordinal(1); 
  f.event->state(OrderState::kFinished);
  f.event->trade(1);

  BOOST_TEST(!f.event->isOrderCreated());
  BOOST_TEST(!f.event->isOrderChanged());
  BOOST_TEST(!f.event->isOrderCancelled());
  BOOST_TEST(f.event->isOrderFilled());
}

BOOST_AUTO_TEST_CASE(order_event_type_231)
{
  OrderEventFixture f;
  f.event->ordinal(1); 
  f.event->state(OrderState::kNA);
  f.event->trade(0);

  BOOST_TEST(f.event->isOrderCreated());
  BOOST_TEST(!f.event->isOrderChanged());
  BOOST_TEST(!f.event->isOrderCancelled());
  BOOST_TEST(!f.event->isOrderFilled());
}

BOOST_AUTO_TEST_CASE(order_event_type_232)
{
  OrderEventFixture f;
  f.event->ordinal(1); 
  f.event->state(OrderState::kNA);
  f.event->trade(1);

  BOOST_TEST(!f.event->isOrderCreated());
  BOOST_TEST(!f.event->isOrderChanged());
  BOOST_TEST(!f.event->isOrderCancelled());
  BOOST_TEST(f.event->isOrderFilled());
}

BOOST_AUTO_TEST_CASE(order_event_type_311)
{
  OrderEventFixture f;
  f.event->ordinal(2); 
  f.event->state(OrderState::kActive);
  f.event->trade(0);

  BOOST_TEST(!f.event->isOrderCreated());
  BOOST_TEST(f.event->isOrderChanged());
  BOOST_TEST(!f.event->isOrderCancelled());
  BOOST_TEST(!f.event->isOrderFilled());
}

BOOST_AUTO_TEST_CASE(order_event_type_312)
{
  OrderEventFixture f;
  f.event->ordinal(2); 
  f.event->state(OrderState::kActive);
  f.event->trade(1);

  BOOST_TEST(!f.event->isOrderCreated());
  BOOST_TEST(!f.event->isOrderChanged());
  BOOST_TEST(!f.event->isOrderCancelled());
  BOOST_TEST(f.event->isOrderFilled());
}

BOOST_AUTO_TEST_CASE(order_event_type_321)
{
  OrderEventFixture f;
  f.event->ordinal(2); 
  f.event->state(OrderState::kFinished);
  f.event->trade(0);

  BOOST_TEST(!f.event->isOrderCreated());
  BOOST_TEST(!f.event->isOrderChanged());
  BOOST_TEST(f.event->isOrderCancelled());
  BOOST_TEST(!f.event->isOrderFilled());
}

BOOST_AUTO_TEST_CASE(order_event_type_322)
{
  OrderEventFixture f;
  f.event->ordinal(2); 
  f.event->state(OrderState::kFinished);
  f.event->trade(1);

  BOOST_TEST(!f.event->isOrderCreated());
  BOOST_TEST(!f.event->isOrderChanged());
  BOOST_TEST(!f.event->isOrderCancelled());
  BOOST_TEST(f.event->isOrderFilled());
}

BOOST_AUTO_TEST_CASE(order_event_type_331)
{
  OrderEventFixture f;
  f.event->ordinal(2); 
  f.event->state(OrderState::kNA);
  f.event->trade(0);

  BOOST_TEST(!f.event->isOrderCreated());
  BOOST_TEST(f.event->isOrderChanged());
  BOOST_TEST(!f.event->isOrderCancelled());
  BOOST_TEST(!f.event->isOrderFilled());
}

BOOST_AUTO_TEST_CASE(order_event_type_332)
{
  OrderEventFixture f;
  f.event->ordinal(2); 
  f.event->state(OrderState::kNA);
  f.event->trade(1);

  BOOST_TEST(!f.event->isOrderCreated());
  BOOST_TEST(!f.event->isOrderChanged());
  BOOST_TEST(!f.event->isOrderCancelled());
  BOOST_TEST(f.event->isOrderFilled());
}
"
      associated_elems
	class_ref 1060870 // OrderEventFixture
      end
    end
  end
end

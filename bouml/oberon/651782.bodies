class Deduplicator
!!!820230.cpp!!!	elapsed() : bool
#ifdef VERBOSE_BITSTAMP_DEDUPLICATOR
std::cout << received_->toString() << "\n";
#endif
for (auto i_other = std::begin(other_messages_);
     i_other != std::end(other_messages_); ++i_other) {
  auto change_size = (*i_other)->change();
  // string order_id {boost::uuids::to_string((*i_other)->maker())};
  if (std::isnan(change_size) || change_size > 0) {
    for (auto i_fills = std::begin(fills_); i_fills != std::end(fills_);
         ++i_fills) {
      if ((*i_other)->maker() == (*i_fills)->maker()) {
        if ((std::isnan(change_size) ||
             std::abs(change_size - (*i_fills)->change()) <
                 reconstructor_.base_increment_)) {
          (*i_fills)->remaining((*i_other)->remaining());
#ifdef VERBOSE_BITSTAMP_DEDUPLICATOR
          std::cout << (*i_other)->toString() << " duplicate, dropped\n";
#endif
          //i_other = other_messages_.erase(i_other);
          (*i_other)->deleted(true);
          i_other = other_messages_.insert(i_other, std::move(*i_fills));
          fills_.erase(i_fills);
          break;
        } else {
#ifdef VERBOSE_BITSTAMP_DEDUPLICATOR
          std::cout << "Not matched\n";
          std::cout << (*i_other)->toString() << "\n";
          std::cout << (*i_fills)->toString() << "\n";
#endif
        }
      }
    }
  }
}
std::move(std::begin(other_messages_), std::end(other_messages_),
          std::back_inserter(output_));
other_messages_.clear();
output_.push_back(std::move(received_));
if (fills_.empty())
  return true;
else {
  for (auto &msg : fills_)
    std::cout << "F :" << msg->toString() << std::endl;
  for (auto &msg : output_)
    std::cout << "E: " << msg->toString() << std::endl;
  fills_.clear();
  return false;
}
!!!820358.cpp!!!	filled() : bool
fills_.push_back(std::unique_ptr<Filled>(dynamic_cast<Filled*>(received_.release())));
return true;
!!!820486.cpp!!!	exchangeMessage() : bool
other_messages_.push_back(std::unique_ptr<OrderEvent>(dynamic_cast<OrderEvent*>(received_.release())));
return true;

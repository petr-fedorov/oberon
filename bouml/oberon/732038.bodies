class Snapshot_State
!!!963718.cpp!!!	create(inout stm : Coinbase) : void
  _doentry(stm);
  {
    stm._set_currentState(stm._coinbase_state._engage_state._subscribed_state._snapshot_state._resolve_state);
#ifdef VERBOSE_STATE_MACHINE
   BOOST_LOG_TRIVIAL(debug) <<  stm._machine_name << "current state is now .Coinbase.Engage.Subscribed.Snapshot.Resolve";
#endif
    stm._coinbase_state._engage_state._subscribed_state._snapshot_state._resolve_state.create(stm);
  }
!!!964870.cpp!!!	message(inout stm : Coinbase) : void
  {
#ifdef VERBOSE_STATE_MACHINE
   BOOST_LOG_TRIVIAL(debug) <<  stm._machine_name << "execute activity of transition queue_message";
#endif
stm.messages_.push_back(std::move(stm.tree_));
#ifdef DEBUG
BOOST_LOG_TRIVIAL(debug) << "Seq no: " << stm.last_seq_number_
          << " Queue size: " << stm.messages_.size();
#endif
stm.ws_->async_read(stm.buffer_,
                    boost::asio::bind_executor(
                        *stm.rtc_, [&stm](const boost::system::error_code &ec,
                                          std::size_t bytes_transferred) {
                          boost::ignore_unused(bytes_transferred);
                          stm.dispatchJson(ec);
                        }));
  }
!!!964998.cpp!!!	_upper(inout stm : Coinbase) : Coinbase::AnyState
  return &stm._coinbase_state._engage_state._subscribed_state;
!!!983942.cpp!!!	_completion(inout stm : Coinbase) : bool
  {
    for(auto s = stm._current_state; s != this && s; s = s->_upper(stm)) s->_doexit(stm);
    stm._coinbase_state._engage_state._subscribed_state._snapshot_state._doexit(stm);
    stm._set_currentState(stm._coinbase_state._engage_state._subscribed_state._output_state);
#ifdef VERBOSE_STATE_MACHINE
   BOOST_LOG_TRIVIAL(debug) <<  stm._machine_name << "current state is now .Coinbase.Engage.Subscribed.Output";
#endif
    stm._coinbase_state._engage_state._subscribed_state._output_state.create(stm);
    return (bool) 1;
  }
!!!997254.cpp!!!	_doexit(inout stm : Coinbase) : void
#ifdef VERBOSE_STATE_MACHINE
   BOOST_LOG_TRIVIAL(debug) <<  stm._machine_name << "execute exit behavior of .Coinbase.Engage.Subscribed.Snapshot";
#endif
stm.https_->next_layer().close(stm.ec_);
#ifdef DEBUG
if(stm.ec_)
 BOOST_LOG_TRIVIAL(warning) << "Https closing error: " << stm.ec_.message(); 
#endif
!!!1028998.cpp!!!	failure(inout stm : Coinbase) : void
  {
    for(auto s = stm._current_state; s != this && s; s = s->_upper(stm)) s->_doexit(stm);
    stm._coinbase_state._engage_state._subscribed_state._snapshot_state._doexit(stm);
#ifdef VERBOSE_STATE_MACHINE
   BOOST_LOG_TRIVIAL(debug) <<  stm._machine_name << "execute activity of transition failure";
#endif
BOOST_LOG_TRIVIAL(warning) << stm.error_message_;
stm.error_message_.clear();
    stm._set_currentState(stm._coinbase_state._engage_state._subscribed_state._failed_state);
#ifdef VERBOSE_STATE_MACHINE
   BOOST_LOG_TRIVIAL(debug) <<  stm._machine_name << "current state is now .Coinbase.Engage.Subscribed.Failed";
#endif
  }
!!!1030150.cpp!!!	timeout(inout stm : Coinbase) : void
  {
    for(auto s = stm._current_state; s != this && s; s = s->_upper(stm)) s->_doexit(stm);
    stm._set_currentState(stm._coinbase_state._engage_state._subscribed_state._snapshot_state._failed_state);
#ifdef VERBOSE_STATE_MACHINE
   BOOST_LOG_TRIVIAL(debug) <<  stm._machine_name << "current state is now .Coinbase.Engage.Subscribed.Snapshot.Failed";
#endif
  }
!!!1045382.cpp!!!	_doentry(inout stm : Coinbase) : void
#ifdef VERBOSE_STATE_MACHINE
   BOOST_LOG_TRIVIAL(debug) <<  stm._machine_name << "execute entry behavior of .Coinbase.Engage.Subscribed.Snapshot";
#endif
stm.https_ctx_ = std::make_unique<boost::asio::ssl::context>(
    boost::asio::ssl::context::sslv23_client);
load_root_certificates(*stm.https_ctx_);
stm.https_ = std::make_unique<SslStream>(*stm.ioc_, *stm.https_ctx_);

if (!SSL_set_tlsext_host_name(stm.https_->native_handle(), stm.https_host_.c_str())) {
  boost::system::error_code ec{static_cast<int>(::ERR_get_error()),
                               boost::asio::error::get_ssl_category()};
  BOOST_LOG_TRIVIAL(error) << ec.message();
}

/*
SSL_CTX_set_keylog_callback(stm.https_ctx_->native_handle(),
      [](const SSL *ssl, const char *line) {
  ofstream f{"./key_https.txt", ios_base::app};
  f << line << "\n";
  f.close();
      });
*/


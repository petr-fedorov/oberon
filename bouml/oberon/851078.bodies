class Receive_State
!!!1200006.cpp!!!	success(inout stm : Feeder) : void
  {
    for(auto s = stm._current_state; s != this && s; s = s->_upper(stm)) s->_doexit(stm);
#ifdef VERBOSE_STATE_MACHINE
   BOOST_LOG_TRIVIAL(debug) <<  stm._machine_name << "execute activity of transition success";
#endif
if (stm.d_->timer_->expires_after(std::chrono::seconds(stm.d_->exhausted_after)) > 0) {
  // We managed to cancel the timer. Start new asynchronous wait.
  stm.d_->timer_->async_wait(boost::asio::bind_executor(
      *stm.d_->strand_, [&stm](const boost::system::error_code &ec) {
        if (ec != boost::asio::error::operation_aborted)
          stm.check();
      }));
}
    stm._set_currentState(stm._feeder_state._busy_state);
#ifdef VERBOSE_STATE_MACHINE
   BOOST_LOG_TRIVIAL(debug) <<  stm._machine_name << "current state is now .Feeder.Busy";
#endif
    if (stm.isControlMessage()
) {
      stm._set_currentState(stm._feeder_state._busy_state._receive_state);
#ifdef VERBOSE_STATE_MACHINE
   BOOST_LOG_TRIVIAL(debug) <<  stm._machine_name << "current state is now .Feeder.Busy.Receive";
#endif
      stm._feeder_state._busy_state._receive_state.create(stm);
    }
    else {
      if (!stm.isGoodSeqNum()
) {
#ifdef VERBOSE_STATE_MACHINE
   BOOST_LOG_TRIVIAL(debug) <<  stm._machine_name << "execute activity of transition bad sequence number";
#endif
BOOST_LOG_TRIVIAL(warning) << stm._machine_name
                         << " Bad sequence number: last_seq=" << stm.d_->last_sequence_ << " sequence="
                         << stm.d_->tree_->get<long long>("sequence");
          stm._feeder_state._busy_state._completion(stm);
      }
      else {
#ifdef VERBOSE_STATE_MACHINE
   BOOST_LOG_TRIVIAL(debug) <<  stm._machine_name << "execute activity of transition report data received";
#endif
stm.reportReceived();
        stm._set_currentState(stm._feeder_state._busy_state._receive_state);
#ifdef VERBOSE_STATE_MACHINE
   BOOST_LOG_TRIVIAL(debug) <<  stm._machine_name << "current state is now .Feeder.Busy.Receive";
#endif
        stm._feeder_state._busy_state._receive_state.create(stm);
      }
    }
  }
!!!1200134.cpp!!!	_upper(inout stm : Feeder) : Feeder::AnyState
  return &stm._feeder_state._busy_state;
!!!1205766.cpp!!!	create(inout stm : Feeder) : void
  _doentry(stm);
  {
    stm._set_currentState(stm._feeder_state._busy_state._receive_state._connected_state);
#ifdef VERBOSE_STATE_MACHINE
   BOOST_LOG_TRIVIAL(debug) <<  stm._machine_name << "current state is now .Feeder.Busy.Receive.Connected";
#endif
  }
!!!1205894.cpp!!!	_doentry(inout stm : Feeder) : void
#ifdef VERBOSE_STATE_MACHINE
   BOOST_LOG_TRIVIAL(debug) <<  stm._machine_name << "execute entry behavior of .Feeder.Busy.Receive";
#endif
stm.d_->ws_->async_read(
    stm.d_->buffer_,
    boost::asio::bind_executor(
        *stm.d_->strand_, [&stm](const boost::system::error_code &ec,
                         std::size_t bytes_transferred) {
          boost::ignore_unused(bytes_transferred);
          if (ec) {
            stm.d_->ec_ = ec;
            stm.d_->error_message_ = ec.message();
            stm.failure();
	    }
          else {
            using namespace boost::property_tree;
            auto local_timestamp = date::format(
                "%FT%TZ",
                std::chrono::time_point_cast<std::chrono::microseconds>(
                    std::chrono::system_clock::now()));
            std::stringstream m;
            m << boost::beast::buffers(stm.d_->buffer_.data());
            stm.d_->tree_ = std::make_unique<boost::property_tree::ptree>();
            boost::property_tree::read_json(m, *stm.d_->tree_);
            stm.d_->tree_->put("local_timestamp", local_timestamp);
            stm.d_->buffer_.consume(stm.d_->buffer_.size());
#ifndef NDEBUG
            BOOST_LOG_TRIVIAL(debug) << stm._machine_name << m.str(); 
#endif
            stm.success();
          }
        }));

class Receive_State
!!!1200006.cpp!!!	success(inout stm : Feeder) : void
  {
#ifdef VERBOSE_STATE_MACHINE
   BOOST_LOG_TRIVIAL(debug) <<  stm._machine_name << "execute activity of transition success";
#endif
if(stm.rh_)stm.rh_(std::move(stm.tree_));


    create(stm);
  }
!!!1200134.cpp!!!	_upper(inout stm : Feeder) : Feeder::AnyState
  return &stm._feeder_state._busy_state;
!!!1205766.cpp!!!	create(inout stm : Feeder) : void
	_doentry(stm);
!!!1205894.cpp!!!	_doentry(inout stm : Feeder) : void
#ifdef VERBOSE_STATE_MACHINE
   BOOST_LOG_TRIVIAL(debug) <<  stm._machine_name << "execute entry behavior of .Feeder.Busy.Receive";
#endif
stm.ws_->async_read(
    stm.buffer_,
    boost::asio::bind_executor(
        *stm.strand_, [&stm](const boost::system::error_code &ec,
                         std::size_t bytes_transferred) {
          boost::ignore_unused(bytes_transferred);
          if (ec)
            stm.failure();
          else {
            using namespace boost::property_tree;
            auto local_timestamp = date::format(
                "%FT%TZ",
                std::chrono::time_point_cast<std::chrono::microseconds>(
                    std::chrono::system_clock::now()));
            stringstream m;
            m << boost::beast::buffers(stm.buffer_.data());
            stm.tree_ = std::move(make_unique<ptree>());
            read_json(m, *stm.tree_);
            stm.tree_->put("local_timestamp", local_timestamp);
            stm.buffer_.consume(stm.buffer_.size());
            // std::cout << m.str() << std::endl;
            stm.success();
          }
        }));

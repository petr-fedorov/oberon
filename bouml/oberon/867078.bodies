class Connecting_State
!!!1232262.cpp!!!	success(inout stm : Snapshot) : void
  {
    for(auto s = stm._current_state; s != this && s; s = s->_upper(stm)) s->_doexit(stm);
    stm._set_currentState(stm._snapshot_state._obtaining_state._doing_ssl_handshake_state);
#ifdef VERBOSE_STATE_MACHINE
   BOOST_LOG_TRIVIAL(debug) <<  stm._machine_name << "current state is now .Snapshot.Obtaining.Doing SSL handshake";
#endif
    stm._snapshot_state._obtaining_state._doing_ssl_handshake_state.create(stm);
  }
!!!1232390.cpp!!!	create(inout stm : Snapshot) : void
	_doentry(stm);
!!!1232518.cpp!!!	_doentry(inout stm : Snapshot) : void
#ifdef VERBOSE_STATE_MACHINE
   BOOST_LOG_TRIVIAL(debug) <<  stm._machine_name << "execute entry behavior of .Snapshot.Obtaining.Connecting";
#endif
auto self(stm.shared_from_this());
boost::asio::async_connect(
    stm.d_->https_->next_layer(), stm.d_->results_.begin(), stm.d_->results_.end(),
    boost::asio::bind_executor(
        *stm.d_->strand_, [&stm, self](const boost::system::error_code &ec,
                          decltype(stm.d_->results_)::iterator iter) {
          if (ec) {
            stm.d_->ec_ = ec;
            stm.d_->error_message_ = ec.message();
            stm.failure();
          } else {
#ifndef NDEBUG
            BOOST_LOG_TRIVIAL(debug) << "IP: " << iter->endpoint().address().to_string()
                      << " Port: " << iter->endpoint().port() << "\n";
#endif
            stm.d_->address_ = iter->endpoint().address();
            stm.success();
          }
        }));
!!!1232646.cpp!!!	_upper(inout stm : Snapshot) : Snapshot::AnyState
  return &stm._snapshot_state._obtaining_state;

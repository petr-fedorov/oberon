class Connect_State
!!!964102.cpp!!!	connected(inout stm : Coinbase) : void
  {
    for(auto s = stm._current_state; s != this && s; s = s->_upper(stm)) s->_doexit(stm);
    stm._set_currentState(stm._coinbase_state._engage_state._subscribed_state._snapshot_state._handshake_ssl_state);
#ifdef VERBOSE_STATE_MACHINE
    std::cout << "DEBUG : current state is now .Coinbase.Engage.Subscribed.Snapshot.Handshake SSL" << std::endl;
#endif
    stm._coinbase_state._engage_state._subscribed_state._snapshot_state._handshake_ssl_state.create(stm);
  }
!!!964230.cpp!!!	_upper(inout stm : Coinbase) : Coinbase::AnyState
  return &stm._coinbase_state._engage_state._subscribed_state._snapshot_state;
!!!967302.cpp!!!	create(inout stm : Coinbase) : void
	_doentry(stm);
!!!967430.cpp!!!	_doentry(inout stm : Coinbase) : void
#ifdef VERBOSE_STATE_MACHINE
  std::cout << "DEBUG : execute entry behavior of .Coinbase.Engage.Subscribed.Snapshot.Connect" << std::endl;
#endif
boost::asio::async_connect(stm.https_->next_layer(), stm.results_.begin(),
                           stm.results_.end(),
                           [&stm](const boost::system::error_code &ec,
                                  decltype(stm.results_)::iterator iter) {
                             if (ec) {
                               stm.ec_ = ec;
                               stm.error();
                             } else {
                               std::cout << "IP: " << iter->endpoint().address().to_string() << " Port: " << iter->endpoint().port() << "\n"; 
                               stm.https_address_ = iter->endpoint().address();
                               stm.connected();
                             }
                           });

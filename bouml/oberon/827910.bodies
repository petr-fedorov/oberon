class Initialize_State
!!!1157126.cpp!!!	create(inout stm : Receiver) : void
  _doentry(stm);
  {
    stm._set_currentState(stm._receiver_state._engage_state._initialize_state._resolve_state);
#ifdef VERBOSE_STATE_MACHINE
   BOOST_LOG_TRIVIAL(debug) <<  stm._machine_name << "current state is now .Receiver.Engage.Initialize.Resolve";
#endif
    stm._receiver_state._engage_state._initialize_state._resolve_state.create(stm);
  }
!!!1157254.cpp!!!	_completion(inout stm : Receiver) : bool
  {
    for(auto s = stm._current_state; s != this && s; s = s->_upper(stm)) s->_doexit(stm);
    stm._set_currentState(stm._receiver_state._engage_state._subscribed_state);
#ifdef VERBOSE_STATE_MACHINE
   BOOST_LOG_TRIVIAL(debug) <<  stm._machine_name << "current state is now .Receiver.Engage.Subscribed";
#endif
    stm._receiver_state._engage_state._subscribed_state.create(stm);
    return (bool) 1;
  }
!!!1157510.cpp!!!	failure(inout stm : Receiver) : void
  {
    for(auto s = stm._current_state; s != this && s; s = s->_upper(stm)) s->_doexit(stm);
    stm._receiver_state._engage_state._doexit(stm);
#ifdef VERBOSE_STATE_MACHINE
   BOOST_LOG_TRIVIAL(debug) <<  stm._machine_name << "execute activity of transition failure";
#endif
#ifdef VERBOSE_STATE_MACHINE
std::cout << stm.error_message_ << "\n";
#endif
    stm._set_currentState(stm._receiver_state);
#ifdef VERBOSE_STATE_MACHINE
   BOOST_LOG_TRIVIAL(debug) <<  stm._machine_name << "current state is now .Receiver";
#endif
      stm._final();
  }
!!!1157638.cpp!!!	_doentry(inout stm : Receiver) : void
#ifdef VERBOSE_STATE_MACHINE
   BOOST_LOG_TRIVIAL(debug) <<  stm._machine_name << "execute entry behavior of .Receiver.Engage.Initialize";
#endif
stm.ctx_ = std::make_unique<boost::asio::ssl::context>(
    boost::asio::ssl::context::sslv23_client);
load_root_certificates(*stm.ctx_);
stm.resolver_ = std::make_unique<boost::asio::ip::tcp::resolver>(*stm.ioc_);
stm.ws_ = std::make_unique<WebsocketStream>(*stm.ioc_, *stm.ctx_);

if (!SSL_set_tlsext_host_name(stm.ws_->next_layer().native_handle(),
                              stm.host_.c_str())) {
  boost::system::error_code ec{static_cast<int>(::ERR_get_error()),
                               boost::asio::error::get_ssl_category()};
  std::cerr << ec.message() << "\n";
}
/*
SSL_CTX_set_keylog_callback(stm.ctx_->native_handle(),
      [](const SSL *ssl, const char *line) {
  ofstream f{"./key.txt", ios_base::app };
  f << line << "\n";
  f.close();
      });
*/
!!!1157766.cpp!!!	_upper(inout stm : Receiver) : Receiver::AnyState
  return &stm._receiver_state._engage_state;

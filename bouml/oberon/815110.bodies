class Query_snapshot_State
!!!1108486.cpp!!!	success(inout stm : CoinbaseReceiver) : void
  {
    for(auto s = stm._current_state; s != this && s; s = s->_upper(stm)) s->_doexit(stm);
    stm._set_currentState(stm._coinbasereceiver_state._engage_state._subscribed_state._snapshot_state._read_snapshot_state);
#ifdef VERBOSE_STATE_MACHINE
   BOOST_LOG_TRIVIAL(debug) <<  stm._machine_name << "current state is now .CoinbaseReceiver.Engage.Subscribed.Snapshot.Read Snapshot";
#endif
    stm._coinbasereceiver_state._engage_state._subscribed_state._snapshot_state._read_snapshot_state.create(stm);
  }
!!!1108614.cpp!!!	create(inout stm : CoinbaseReceiver) : void
	_doentry(stm);
!!!1108742.cpp!!!	_doentry(inout stm : CoinbaseReceiver) : void
#ifdef VERBOSE_STATE_MACHINE
   BOOST_LOG_TRIVIAL(debug) <<  stm._machine_name << "execute entry behavior of .CoinbaseReceiver.Engage.Subscribed.Snapshot.Query snapshot";
#endif
namespace http = boost::beast::http;
#ifdef DEBUG
BOOST_LOG_TRIVIAL(debug) << "HTTP GET " << stm.https_req_.target();
#endif
http::async_write(
    *stm.https_, stm.https_req_,
    boost::asio::bind_executor(
        *stm.rtc_, [&stm](const boost::system::error_code &ec,
                          std::size_t bytes_transferred) {
          if (ec) {
            stm.ec_ = ec;
            stm.error_message_ = ec.message();
            stm.failure();
          } else {
            stm.success();
          }
        }));
!!!1108870.cpp!!!	_upper(inout stm : CoinbaseReceiver) : CoinbaseReceiver::AnyState
  return &stm._coinbasereceiver_state._engage_state._subscribed_state._snapshot_state;

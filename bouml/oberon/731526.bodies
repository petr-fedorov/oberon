class Connect_State
!!!962310.cpp!!!	create(inout stm : Coinbase) : void
	_doentry(stm);
!!!962438.cpp!!!	_doentry(inout stm : Coinbase) : void
#ifdef VERBOSE_STATE_MACHINE
   BOOST_LOG_TRIVIAL(debug) <<  stm._machine_name << "execute entry behavior of .Coinbase.Engage.Initialize.Connect";
#endif
// Make the connection on the IP address we get from a lookup
boost::asio::async_connect(
    stm.ws_->next_layer().next_layer(), stm.results_.begin(),
    stm.results_.end(),
    boost::asio::bind_executor(*stm.rtc_,
                               [&stm](const boost::system::error_code &ec,
                                      decltype(stm.results_.begin()) iter) {
                                 if (ec) {
                                   stm.ec_ = ec;
                                   stm.failure();
                                 } else {
                                   stm.address_ = iter->endpoint().address();
                                   stm.success();
                                 }
                               }));
!!!962566.cpp!!!	_upper(inout stm : Coinbase) : Coinbase::AnyState
  return &stm._coinbase_state._engage_state._initialize_state;
!!!1027718.cpp!!!	success(inout stm : Coinbase) : void
  {
    for(auto s = stm._current_state; s != this && s; s = s->_upper(stm)) s->_doexit(stm);
    stm._set_currentState(stm._coinbase_state._engage_state._initialize_state._handshake_ssl_state);
#ifdef VERBOSE_STATE_MACHINE
   BOOST_LOG_TRIVIAL(debug) <<  stm._machine_name << "current state is now .Coinbase.Engage.Initialize.Handshake SSL";
#endif
    stm._coinbase_state._engage_state._initialize_state._handshake_ssl_state.create(stm);
  }

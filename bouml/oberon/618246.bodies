class Remaining_size_State
!!!777606.cpp!!!	_completion(inout stm : Deduce_Size_Coinbase) : bool
  if (!std::isnan(stm.previous_size_)) {
    for(auto s = stm._current_state; s != this && s; s = s->_upper(stm)) s->_doexit(stm);
    stm._deduce_size_coinbase_state._deduce_state._doexit(stm);
#ifdef VERBOSE_STATE_MACHINE
   BOOST_LOG_TRIVIAL(debug) <<  stm._machine_name << "execute activity of transition success";
#endif
stm.em_->setRemainingSize(stm.previous_size_ - stm.em_->getChangeSize());
    stm._set_currentState(stm._deduce_size_coinbase_state._save_state);
#ifdef VERBOSE_STATE_MACHINE
   BOOST_LOG_TRIVIAL(debug) <<  stm._machine_name << "current state is now .Deduce Size Coinbase.Save";
#endif
    stm._deduce_size_coinbase_state._save_state.create(stm);
    return (bool) 1;
  }
  else if (std::isnan(stm.previous_size_)) {
    for(auto s = stm._current_state; s != this && s; s = s->_upper(stm)) s->_doexit(stm);
    stm._set_currentState(stm._deduce_size_coinbase_state._deduce_state);
#ifdef VERBOSE_STATE_MACHINE
   BOOST_LOG_TRIVIAL(debug) <<  stm._machine_name << "current state is now .Deduce Size Coinbase.Deduce";
#endif
    stm._deduce_size_coinbase_state._deduce_state._exit1(stm);
    return (bool) 1;
  }
  return (bool) 0;
!!!777734.cpp!!!	create(inout stm : Deduce_Size_Coinbase) : void
	_doentry(stm);
	_completion(stm);
!!!777862.cpp!!!	_doentry(inout stm : Deduce_Size_Coinbase) : void
#ifdef VERBOSE_STATE_MACHINE
   BOOST_LOG_TRIVIAL(debug) <<  stm._machine_name << "execute entry behavior of .Deduce Size Coinbase.Deduce.Remaining size";
#endif

!!!777990.cpp!!!	_upper(inout stm : Deduce_Size_Coinbase) : Deduce_Size_Coinbase::AnyState
  return &stm._deduce_size_coinbase_state._deduce_state;

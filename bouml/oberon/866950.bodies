class Resolving_State
!!!1231494.cpp!!!	success(inout stm : Snapshot) : void
  {
    for(auto s = stm._current_state; s != this && s; s = s->_upper(stm)) s->_doexit(stm);
    stm._set_currentState(stm._snapshot_state._obtaining_state._connecting_state);
#ifdef VERBOSE_STATE_MACHINE
   BOOST_LOG_TRIVIAL(debug) <<  stm._machine_name << "current state is now .Snapshot.Obtaining.Connecting";
#endif
    stm._snapshot_state._obtaining_state._connecting_state.create(stm);
  }
!!!1231622.cpp!!!	create(inout stm : Snapshot) : void
	_doentry(stm);
!!!1231750.cpp!!!	_doentry(inout stm : Snapshot) : void
#ifdef VERBOSE_STATE_MACHINE
   BOOST_LOG_TRIVIAL(debug) <<  stm._machine_name << "execute entry behavior of .Snapshot.Obtaining.Resolving";
#endif
auto self(stm.shared_from_this());
stm.d_->resolver_->async_resolve(
    stm.d_->host_, stm.d_->port_,
    boost::asio::bind_executor(
        *stm.d_->strand_,
        [&stm, self](const boost::system::error_code &ec,
               boost::asio::ip::tcp::resolver::results_type results) {
          if (ec) {
            stm.d_->ec_ = ec;
            stm.d_->error_message_ = ec.message();
            stm.failure();
          } else {
            stm.d_->results_ = results;
            stm.success();
          }
        }));
!!!1231878.cpp!!!	_upper(inout stm : Snapshot) : Snapshot::AnyState
  return &stm._snapshot_state._obtaining_state;

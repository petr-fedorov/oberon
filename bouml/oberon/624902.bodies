class Reconstructor
!!!793222.cpp!!!	Reconstructor(inout handler : MessageHandler::MessageHandler_SP)

!!!792582.cpp!!!	extractMessage(in tree : ptree [1]) : Message::Message_UP [1..*]
using namespace date;
using namespace std;
string type = tree.get<string>("event");
auto output = boost::make_unique<OrderEvent>();
if (type == "elapsed") {
  return boost::make_unique<Elapsed>(
      toTimestamp(tree.get<string>("timestamp")));
} else if (type == "order_changed") {
  output->timestamp(toTimestamp(tree.get<std::string>("exchange_timestamp")));
  output->heard(toTimestamp(tree.get<std::string>("local_timestamp")));
  output->maker(toUuid(tree.get<std::string>("order_id")));
  output->price(std::stod(tree.get<std::string>("price")));
  auto r = std::stod(tree.get<std::string>("amount"));
  if (r < 0) {
    output->remaining(-r);
    output->side(BookSide::kAsk);
  } else {
    output->remaining(r);
    output->side(BookSide::kBid);
  }
  assert(output->isOrderChanged());
  return std::move(output);

} else if (type == "order_deleted") {
  output->timestamp(toTimestamp(tree.get<std::string>("exchange_timestamp")));
  output->heard(toTimestamp(tree.get<std::string>("local_timestamp")));
  output->maker(toUuid(tree.get<std::string>("order_id")));
  if (std::stod(tree.get<std::string>("amount")) < 0) {
    output->side(BookSide::kAsk);
  } else
    output->side(BookSide::kBid);
  assert(output->isOrderCancelled());
  return std::move(output);
} else if (type == "match") {
  output->timestamp(toTimestamp(tree.get<std::string>("mts")));
  output->heard(toTimestamp(tree.get<std::string>("local_timestamp")));
  output->price(std::stod(tree.get<std::string>("price")));
  auto change_size = std::stod(tree.get<std::string>("amount"));
  if (change_size < 0) {
    output->change(-change_size);
    output->side(BookSide::kBid);
  } else {
    output->change(change_size);
    output->side(BookSide::kAsk);
  }
  output->trade(std::stol(tree.get<std::string>("id")));
  assert(output->isOrderFilled());
  return std::move(output);
}
return Message::Message_UP{};

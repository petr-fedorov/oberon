class CoinbaseReceiver
!!!915590.cpp!!!	CoinbaseReceiver()
  _current_state = 0;
!!!917382.cpp!!!	CoinbaseReceiver(inout ioc : io_context, in product : string, inout f : Reconstructor)
rtc_ = std::make_unique<boost::asio::io_context::strand>(*ioc);
reconstructor_strand_ = std::make_unique<boost::asio::io_context::strand>(*ioc);
timer_ = std::make_unique<boost::asio::deadline_timer>(*ioc);
signal_set_ = std::make_unique<boost::asio::signal_set>(*ioc, SIGINT, SIGTERM);

namespace http = boost::beast::http;
https_req_.method(http::verb::get);
https_req_.target("/products/" + product + "/book?level=3");
https_req_.set(http::field::host, https_host_);
https_req_.set(http::field::user_agent, BOOST_BEAST_VERSION_STRING);

using namespace boost::property_tree;
ptree p, h, c;

p.put("", product);
h.put("", "heartbeat");
c.put("", "full");

products_.push_back(std::make_pair("", p));
channels_.push_back(std::make_pair("", h));
channels_.push_back(std::make_pair("", c));
_machine_name = "Receiver - ";
!!!916486.cpp!!!	doActivity() : void
  _current_state->_do(*this);
!!!916614.cpp!!!	_set_currentState(inout st : CoinbaseReceiver::AnyState) : void
  _current_state = &st;
!!!916742.cpp!!!	_final() : void
  _current_state = 0;
CoinbaseReceiver &stm {*this};
#ifdef VERBOSE_STATE_MACHINE
   BOOST_LOG_TRIVIAL(debug) <<  stm._machine_name << "final state reached";
#endif
!!!925574.cpp!!!	heartbeat() : bool
  if (_current_state != 0) {
 CoinbaseReceiver & stm {*this};
#ifdef VERBOSE_STATE_MACHINE
   BOOST_LOG_TRIVIAL(debug) <<  stm._machine_name << "fire trigger heartbeat";
#endif
_current_state->heartbeat(*this);
  }
  return (_current_state != 0);
!!!927622.cpp!!!	message() : bool
  if (_current_state != 0) {
 CoinbaseReceiver & stm {*this};
#ifdef VERBOSE_STATE_MACHINE
   BOOST_LOG_TRIVIAL(debug) <<  stm._machine_name << "fire trigger message";
#endif
_current_state->message(*this);
  }
  return (_current_state != 0);
!!!935302.cpp!!!	dispatchJson(in ec : error_code) : void
// boost::ignore_unused(bytes_transferred);
using namespace boost::property_tree;
auto local_timestamp = date::format("%FT%TZ", std::chrono::time_point_cast<std::chrono::microseconds>(std::chrono::system_clock::now()));
if (ec) {
  ec_ = ec;
  error_message_ = "dispatchJson(): " + ec.message();
#ifdef DEBUG
  BOOST_LOG_TRIVIAL(warning) << error_message_;
#endif
  failure();
}
else {
  stringstream m;
  m << boost::beast::buffers(buffer_.data());
  tree_ = std::move(make_unique<ptree>());
  read_json(m, *tree_);
  tree_->put("local_timestamp", local_timestamp);

  buffer_.consume(buffer_.size());
  // std::cout << m.str() << std::endl;
  std::string msg_type{tree_->get<std::string>("type")};
  try {
    auto seq_number = tree_->get<std::uint64_t>("sequence");

    if (msg_type == "heartbeat") {
      if (seq_number == last_seq_number_ || !last_seq_number_)
        heartbeat();
      else {
#ifdef DEBUG
        BOOST_LOG_TRIVIAL(warning) << "Heartbeat: Expected " << last_seq_number_ << " but got "
                  << seq_number;
#endif
        failure();
      }
    } else {

      if (!first_seq_number_) {
        first_seq_number_ = seq_number;
        last_seq_number_ = seq_number - 1;
#ifdef DEBUG
        BOOST_LOG_TRIVIAL(debug) << "First sequence number : " << first_seq_number_ ;
#endif
      }

      if (seq_number == last_seq_number_ + 1) {
        last_seq_number_ = seq_number;
        message();
      } else {
#ifdef DEBUG
        BOOST_LOG_TRIVIAL(warning) << "Message : Expected " << last_seq_number_ + 1
                  << " but got " << seq_number;
#endif
        failure();
      }
    }
  } catch (const boost::property_tree::ptree_error &e) {
    if (msg_type == "error") {
#ifdef DEBUG
      BOOST_LOG_TRIVIAL(warning) << tree_->get<std::string>("message") << std::endl;
#endif
      failure();
    } else if (msg_type == "subscriptions")
      success();
    else
      failure();
  };
}

!!!974726.cpp!!!	stop() : bool
  if (_current_state != 0) {
 CoinbaseReceiver & stm {*this};
#ifdef VERBOSE_STATE_MACHINE
   BOOST_LOG_TRIVIAL(debug) <<  stm._machine_name << "fire trigger stop";
#endif
_current_state->stop(*this);
  }
  return (_current_state != 0);
!!!976518.cpp!!!	timeout() : bool
  if (_current_state != 0) {
 CoinbaseReceiver & stm {*this};
#ifdef VERBOSE_STATE_MACHINE
   BOOST_LOG_TRIVIAL(debug) <<  stm._machine_name << "fire trigger timeout";
#endif
_current_state->timeout(*this);
  }
  return (_current_state != 0);
!!!1027078.cpp!!!	success() : bool
  if (_current_state != 0) {
 CoinbaseReceiver & stm {*this};
#ifdef VERBOSE_STATE_MACHINE
   BOOST_LOG_TRIVIAL(debug) <<  stm._machine_name << "fire trigger success";
#endif
_current_state->success(*this);
  }
  return (_current_state != 0);
!!!1027974.cpp!!!	failure() : bool
  if (_current_state != 0) {
 CoinbaseReceiver & stm {*this};
#ifdef VERBOSE_STATE_MACHINE
   BOOST_LOG_TRIVIAL(debug) <<  stm._machine_name << "fire trigger failure";
#endif
_current_state->failure(*this);
  }
  return (_current_state != 0);
!!!1113606.cpp!!!	create() : bool
if (_current_state == 0)
  (_current_state = &(*this)._coinbasereceiver_state)->create(*this);
return (_current_state != 0);
!!!1114502.cpp!!!	processed() : bool
  if (_current_state != 0) {
 CoinbaseReceiver & stm {*this};
#ifdef VERBOSE_STATE_MACHINE
   BOOST_LOG_TRIVIAL(debug) <<  stm._machine_name << "fire trigger processed";
#endif
_current_state->processed(*this);
  }
  return (_current_state != 0);
!!!1115014.cpp!!!	defer() : void
messages_.push_back(std::move(tree_));
#ifdef DEBUG
BOOST_LOG_TRIVIAL(debug) << "Seq no: " << last_seq_number_ << " Queue size: " << messages_.size();
#endif
ws_->async_read(buffer_,
                    boost::asio::bind_executor(
                        *rtc_, [this](const boost::system::error_code &ec,
                                          std::size_t bytes_transferred) {
                          boost::ignore_unused(bytes_transferred);
                          this->dispatchJson(ec);
                        }));


